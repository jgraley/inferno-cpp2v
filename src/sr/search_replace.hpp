#ifndef SEARCH_REPLACE_HPP
#define SEARCH_REPLACE_HPP

#include "common/common.hpp"
#include "common/read_args.hpp"
#include "helpers/walk.hpp"
#include "helpers/transformation.hpp"
#include "coupling.hpp"
#include "agent.hpp"
#include <set>

namespace SR 
{

class Conjecture;
class SpecialBase;
class StuffBase;
class StarBase;
class SlaveBase;
class SearchContainerBase;

class CompareReplace : virtual public InPlaceTransformation, 
                       public Filter 
{  
public:
    // Constructor and destructor. Search and replace patterns and couplings are
    // specified here, so that we have a fully confiugured functor.
    CompareReplace( TreePtr<Node> cp = TreePtr<Node>(),
                    TreePtr<Node> rp = TreePtr<Node>(),
                    bool im = true );
                    
    // Call this to set the patterns after construction. This should not be virtual since
    // the constructor calls it.
    void Configure( TreePtr<Node> cp,
                    TreePtr<Node> rp = TreePtr<Node>() );                
    virtual void ConfigureImpl();					
    
    // Stuff for soft nodes; support this base class in addition to whatever tree intermediate
    // is required. Call GetProgram() if program root needed; call DecidedCompare() to recurse
    // back into the general search algorithm.
    TreePtr<Node> GetContext() const { ASSERT(pcontext&&*pcontext); return *pcontext; }

    // Some self-testing
    static void Test();
        
    bool is_master;// TODO seems to be obsolete
    TreePtr<Node> compare_pattern;
    TreePtr<Node> replace_pattern;
    CompareReplace *master_ptr;
    TreePtr<Node> *pcontext;
    mutable CouplingKeys coupling_keys;
    mutable Set< TreePtr<Node> > dirty_grass;
    
    // Sets of nodes for debugging purposes. Checks should be positive, because identifiers are copied
    // shallowly and will appear in more than one set. Since they are const, preservation rules do not
    // apply to identifiers. Only use these when ReadArgs::assert_pedigree is true.
    Set< TreePtr<Node> > pattern_pedigree;            // Nodes from the replace pattern 
    mutable Set< TreePtr<Node> > duplicated_pedigree; // Nodes generated by duplication in replace 
    mutable Set< TreePtr<Node> > keyed_pedigree;      // Nodes found in coupling keys, essentially the input
    
    virtual void GetGraphInfo( vector<string> *labels, 
                               vector< TreePtr<Node> > *links ) const;

    static void SetMaxReps( int n, bool e ) { repetitions=n; rep_error=e; }
    const CompareReplace * GetOverallMaster() const
    {
        const CompareReplace *m = this;
        while( m->master_ptr )
            m = m->master_ptr;
        return m;
    }

private:
    bool is_configured; 
    static int repetitions;
    static bool rep_error;
public:
    bool DecidedCompare( const TreePtrInterface &x,
    		               TreePtr<Node> pattern,
    		               bool can_key,
    		               Conjecture &conj ) const;
private:
    // MatchingDecidedCompare ring
    friend class Conjecture;
    bool MatchingDecidedCompare( const TreePtrInterface &x,
    		                       TreePtr<Node> pattern,
    		                       bool can_key,
    		                       Conjecture &conj ) const;

    void FlushSoftPatternCaches( TreePtr<Node> pattern ) const;
public:
    // Compare ring (now trivial)
    bool Compare( const TreePtrInterface &x,
    		        TreePtr<Node> pattern,
	                bool can_key = false ) const;
    virtual bool IsMatch( TreePtr<Node> context,       
                          TreePtr<Node> root );
public:
    TreePtr<Node> BuildReplace( TreePtr<Node> pattern ) const;
private:
    TreePtr<Node> DuplicateNode( TreePtr<Node> pattern,
    		                     bool force_dirty ) const;
    TreePtr<Node> DuplicateSubtree( TreePtr<Node> source,
		                            TreePtr<Node> source_terminus = TreePtr<Node>(),
		                            TreePtr<Node> dest_terminus = TreePtr<Node>() ) const;
    void KeyReplaceNodes( TreePtr<Node> pattern ) const;
    TreePtr<Node> ReplacePhase( TreePtr<Node> x ) const;
    // implementation ring: Do the actual search and replace
    bool SingleCompareReplace( TreePtr<Node> *proot );
    int RepeatingCompareReplace( TreePtr<Node> *proot );
public:
    // Functor style interface for RepeatingSearchReplace; implements Pass interface.
    using Transformation::operator();
    void operator()( TreePtr<Node> context, 
                     TreePtr<Node> *proot );

	friend class NormalAgent;
};


class SearchReplace : public CompareReplace
{
public:
    SearchReplace( TreePtr<Node> sp = TreePtr<Node>(),
                   TreePtr<Node> rp = TreePtr<Node>(),
                   bool im = true );
                   
    virtual void ConfigureImpl();                 
                    
    virtual void GetGraphInfo( vector<string> *labels, 
                               vector< TreePtr<Node> > *links ) const;
};


// --- General note on SPECIAL_NODE_FUNCTIONS and PRE_RESTRICTION ---
// Special nodes (that is nodes defined here with special S&R behaviour)
// derive from a normal tree node via templating. This base class is
// the PRE_RESTRICTION node, and we want it for 2 reasons:
// 1. To allow normal nodes to point to special nodes, they must
//    expose a normal interface, which can vary depending on usage
//    so must be templated.
// 2. We are able to provide a "free" and-rule restriction on all
//    special nodes by restricting to non-strict subclasses of the
//    pre-restrictor.
// In order to make 2. work, we need to *avoid* overriding IsLocalMatch()
// or IsSubclass() on special nodes, so that the behaviour of the 
// PRE_RESTRICTION is preserved wrt comparisons. So all special nodes
// including speicialisations of TransformTo etc should use 
// SPECIAL_NODE_FUNCTIONS instead of NODE_FUNCTIONS.
// Itemise is known required (for eg graph plotting), other bounces
// are TBD.
#define SPECIAL_NODE_FUNCTIONS ITEMISE_FUNCTION  
struct SpecialBase
{
    virtual shared_ptr< TreePtrInterface > GetPreRestrictionArchitype() = 0;
};
template<class PRE_RESTRICTION>
struct Special : SpecialBase, virtual PRE_RESTRICTION
{
    virtual shared_ptr< TreePtrInterface > GetPreRestrictionArchitype()
    {
        // Esta muchos indirection
        return shared_ptr<TreePtrInterface>( new TreePtr<PRE_RESTRICTION>( new PRE_RESTRICTION ));  
    }
};

/// Coupling slave can read the master's CouplingKeys structure
struct CouplingSlave 
{
    virtual void SetCouplingsMaster( CouplingKeys *ck ) = 0;    
};

struct SlaveBase : virtual CouplingSlave, virtual InPlaceTransformation, virtual NormalAgent
{
    virtual TreePtr<Node> GetThrough() const = 0;
	virtual void ConfigureImpl() = 0; // For master to trigger configuration
};

template<typename ALGO>
struct SlaveIntermediate : public SlaveBase, public ALGO                                 
{
	SlaveIntermediate( TreePtr<Node> sp, TreePtr<Node> rp ) :
		ALGO( sp, rp, false )
	{}
    virtual void SetCouplingsMaster( CouplingKeys *ck )
    {
        ALGO::coupling_keys.SetMaster( ck ); 
    }
    virtual void GetGraphInfo( vector<string> *labels, 
                               vector< TreePtr<Node> > *links ) const
    {
        labels->push_back("through");
        links->push_back(GetThrough());
        ALGO::GetGraphInfo( labels, links );
    }
    virtual void ConfigureImpl()
	{
	    ALGO::ConfigureImpl();
	}		
};

template<typename ALGO, class PRE_RESTRICTION>
struct Slave : SlaveIntermediate<ALGO>, Special<PRE_RESTRICTION>
{
	SPECIAL_NODE_FUNCTIONS

	// SlaveSearchReplace must be constructed using constructor
	Slave( TreePtr<PRE_RESTRICTION> t, TreePtr<Node> sp, TreePtr<Node> rp ) :
		through( t ),
		SlaveIntermediate<ALGO>( sp, rp )
	{
	}

	TreePtr<PRE_RESTRICTION> through;
	virtual TreePtr<Node> GetThrough() const
	{
		return TreePtr<Node>( through );
	}
};

// Partial specialisation is an arse in C++
template<class PRE_RESTRICTION>
struct SlaveCompareReplace : Slave<CompareReplace, PRE_RESTRICTION>, virtual Node
{
    SlaveCompareReplace() : Slave<CompareReplace, PRE_RESTRICTION>( NULL, NULL, NULL ) {}      
    SlaveCompareReplace( TreePtr<PRE_RESTRICTION> t, TreePtr<Node> sp=TreePtr<Node>(), TreePtr<Node> rp=TreePtr<Node>() ) :
        Slave<CompareReplace, PRE_RESTRICTION>( t, sp, rp ) {}
};

template<class PRE_RESTRICTION>
struct SlaveSearchReplace : Slave<SearchReplace, PRE_RESTRICTION>, virtual Node
{
    SlaveSearchReplace() : Slave<SearchReplace, PRE_RESTRICTION>( NULL, NULL, NULL ) {}      
    SlaveSearchReplace( TreePtr<PRE_RESTRICTION> t, TreePtr<Node> sp=TreePtr<Node>(), TreePtr<Node> rp=TreePtr<Node>() ) :
        Slave<SearchReplace, PRE_RESTRICTION>( t, sp, rp ) {}
};


// The * wildcard can match more than one node of any type in a container
// In a Sequence, only a contiguous subsequence of 0 or more elements will match
// In a Collection, a sub-collection of 0 or more elements may be matched anywhere in the collection
// Only one Star is allowed in a Collection. Star must be templated on a type that is allowed
// in the collection. TODO a restrict pattern
struct StarBase : virtual Node, virtual NormalAgent 
{
    virtual TreePtr<Node> GetPattern() = 0;
    bool MatchRange( const CompareReplace *sr,
                       ContainerInterface &range,
                       bool can_key );
};
template<class PRE_RESTRICTION>
struct Star : StarBase, Special<PRE_RESTRICTION> 
{ 
    SPECIAL_NODE_FUNCTIONS 
    TreePtr<PRE_RESTRICTION> pattern; // TODO rename to "restriction"
    virtual TreePtr<Node> GetPattern() 
    {
        return pattern;
    }
};


struct GreenGrassBase : virtual Node, virtual NormalAgent 
{
    virtual TreePtr<Node> GetThrough() const = 0;
};
template<class PRE_RESTRICTION>
struct GreenGrass : GreenGrassBase, Special<PRE_RESTRICTION>
{
    SPECIAL_NODE_FUNCTIONS
    TreePtr<PRE_RESTRICTION> through;
    virtual TreePtr<Node> GetThrough() const
    {
        return TreePtr<Node>( through );
    }
};

struct TerminusKey : Key // TODO put in TerminusBase
{
    TreePtr<Node> terminus;
};
struct TerminusBase : virtual Node 
{
    TreePtr<Node> terminus; // A node somewhere under Stuff, that matches normally, truncating the subtree
};


struct SearchContainerBase : TerminusBase, virtual NormalAgent
{
    virtual shared_ptr<ContainerInterface> GetContainerInterface( TreePtr<Node> x ) = 0;
};


// The Stuff wildcard can match a truncated subtree with special powers as listed by the members
struct StuffBase : virtual Node, 
                   public SearchContainerBase
{
    StuffBase() : one_level(false){}
    TreePtr<Node> recurse_restriction; // Restricts the intermediate nodes in the truncated subtree
    CompareReplace recurse_comparer; // TODO only need the compare half, maybe split it out?
    bool one_level;
    virtual shared_ptr<ContainerInterface> GetContainerInterface( TreePtr<Node> x );
};
template<class PRE_RESTRICTION>
struct Stuff : StuffBase, Special<PRE_RESTRICTION> 
{
    // Do the itemiser by hand since it gets confused by the CompareReplace object   
    virtual vector< Itemiser::Element * > Itemise( const Itemiser *itemise_object = 0 ) const
    {
        vector< Itemiser::Element * > v;
        v.push_back( (Itemiser::Element *)(&recurse_restriction) );
        v.push_back( (Itemiser::Element *)(&terminus) );
        return v;
    }
    virtual Itemiser::Element *ItemiseIndex( int i ) const  
    { 
        return Itemise()[i];
    } 
    virtual int ItemiseSize() const  
    { 
        return Itemise().size();
    }
};


struct AnyNodeBase : virtual Node, 
                     public SearchContainerBase
{
    virtual shared_ptr<ContainerInterface> GetContainerInterface( TreePtr<Node> x );
};
template<class PRE_RESTRICTION>
struct AnyNode : AnyNodeBase, Special<PRE_RESTRICTION> 
{
    SPECIAL_NODE_FUNCTIONS
};


struct OverlayBase : virtual Node, virtual NormalAgent
{
    virtual TreePtr<Node> GetThrough() const = 0;
    virtual TreePtr<Node> GetOverlay() const = 0;    
};

template<class PRE_RESTRICTION>
struct Overlay : OverlayBase, Special<PRE_RESTRICTION>
{
    SPECIAL_NODE_FUNCTIONS
    TreePtr<PRE_RESTRICTION> through;
    TreePtr<PRE_RESTRICTION> overlay;
    virtual TreePtr<Node> GetThrough() const 
    {
        return (TreePtr<Node>)through;
    }
    virtual TreePtr<Node> GetOverlay() const
    {
        return (TreePtr<Node>)overlay;
    }
};

struct InsertBase : virtual Node, virtual NormalAgent
{
    virtual SequenceInterface *GetInsert() = 0;    
};

template<class PRE_RESTRICTION>
struct Insert : InsertBase, Special<PRE_RESTRICTION>
{
    SPECIAL_NODE_FUNCTIONS
    Sequence<PRE_RESTRICTION> insert;
    virtual SequenceInterface *GetInsert()  
    {
        return &insert;
    }
};

struct EraseBase : virtual Node, virtual NormalAgent
{
    virtual SequenceInterface *GetErase() = 0;    
};

template<class PRE_RESTRICTION>
struct Erase : EraseBase, Special<PRE_RESTRICTION>
{
    SPECIAL_NODE_FUNCTIONS
    Sequence<PRE_RESTRICTION> erase;
    virtual SequenceInterface *GetErase()  
    {
        return &erase;
    }
};

// Tell soft nodes that a compare run is beginning and it can flush any caches it may have
struct Flushable
{
	virtual void FlushCache() {}
};

class SoftSearchPattern : Flushable
{
public:
    SoftSearchPattern() :
	    current_sr( NULL ),
		current_can_key( false ),
		current_conj( NULL )
	{}
	
	virtual bool DecidedCompare( const CompareReplace *sr,
									const TreePtrInterface &x,
									bool can_key,
									Conjecture &conj ) 									
	{
		ASSERT( !current_sr )("DecidedCompare() recursion detected in soft node");
		ASSERT( !current_conj )("DecidedCompare() recursion detected in soft node");
	    current_sr = sr;
		current_can_key = can_key;
		current_conj = &conj;	
        bool result = MyCompare( x, can_key );
        current_sr = NULL;
		current_conj = NULL;
		return result;
	}
	// Soft nodes should override this to implement their comparison function
    virtual bool MyCompare( const TreePtrInterface &x, bool can_key )
    {
	    ASSERTFAIL("One of DecidedCompare() (deprecated) or Myompare() must be overridden in soft nodes");
    }	
protected: // Call only from the soft node implementation in MyCompare()
    // Compare for child nodes in a normal context (i.e. in which the pattern must match
	// for an overall match to be possible, and so can be used to key a coupling)
	bool Compare( TreePtr<Node> x, TreePtr<Node> pattern )
	{
		ASSERT( current_sr )("Cannot call Compare() from other than MyCompare()");
		ASSERT( current_conj )("Cannot call Compare() from other than MyCompare()");
		return current_sr->DecidedCompare( x, pattern, current_can_key, *current_conj );
	}
    // Compare for child nodes in an abnormal context (i.e. in which the pattern need not match
	// for an overall match to be possible, and so cannot be used to key a coupling)
	bool AbnormalCompare( TreePtr<Node> x, TreePtr<Node> pattern )
	{
		ASSERT( current_sr )("Cannot call AbnormalCompare() from other than MyNormalCompare()");
		return current_sr->Compare( x, pattern, false ); 
	}
private:
    const CompareReplace *current_sr;
	bool current_can_key;
	Conjecture *current_conj; 
};
struct SoftSearchPatternSpecialKey : Flushable
{
	// Return NULL for not found
	virtual shared_ptr<Key> DecidedCompare( const CompareReplace *sr,
											const TreePtrInterface &x,
											bool can_key,
											Conjecture &conj ) = 0;
};
struct SoftReplacePattern : Flushable
{
	// Called when not coupled
	virtual TreePtr<Node> DuplicateSubtree( const CompareReplace *sr ) = 0;
	// Called when coupled, dest is coupling key
	virtual TreePtr<Node> GetOverlayPattern() 
	{ 
		return TreePtr<Node>(); // default implementation for weak modifiers 
								// so that couplings appear to override local functionality
	}
};

};

#endif

