#ifndef SEARCH_REPLACE_HPP
#define SEARCH_REPLACE_HPP

#include "common/common.hpp"
#include "common/read_args.hpp"
#include "helpers/walk.hpp"
#include "helpers/transformation.hpp"
#include "coupling.hpp"
#include "agent.hpp"
#include "normal_agent.hpp"
#include "search_container_agent.hpp"
#include "green_grass_agent.hpp"
#include "overlay_agent.hpp"
#include "soft_agent.hpp"
#include <set>

namespace SR 
{

class Conjecture;
class SpecialBase;
class StarBase;
class SlaveBase;
class SearchContainerBase;

class CompareReplace : virtual public InPlaceTransformation, 
                       public Filter 
{  
public:
    // Constructor and destructor. Search and replace patterns and couplings are
    // specified here, so that we have a fully confiugured functor.
    CompareReplace( TreePtr<Node> cp = TreePtr<Node>(),
                    TreePtr<Node> rp = TreePtr<Node>(),
                    bool im = true );
                    
    // Call this to set the patterns after construction. This should not be virtual since
    // the constructor calls it.
    void Configure( TreePtr<Node> cp,
                    TreePtr<Node> rp = TreePtr<Node>() );                
    virtual void ConfigureImpl();					
    
    // Stuff for soft nodes; support this base class in addition to whatever tree intermediate
    // is required. Call GetProgram() if program root needed; call DecidedCompare() to recurse
    // back into the general search algorithm.
    TreePtr<Node> GetContext() const { ASSERT(pcontext&&*pcontext); return *pcontext; }

    bool is_master;// TODO seems to be obsolete
    TreePtr<Node> compare_pattern;
    TreePtr<Node> replace_pattern;
    CompareReplace *master_ptr;
    TreePtr<Node> *pcontext;
    mutable CouplingKeys coupling_keys;
    mutable Set< TreePtr<Node> > dirty_grass;
    
    // Sets of nodes for debugging purposes. Checks should be positive, because identifiers are copied
    // shallowly and will appear in more than one set. Since they are const, preservation rules do not
    // apply to identifiers. Only use these when ReadArgs::assert_pedigree is true.
    Set< TreePtr<Node> > pattern_pedigree;            // Nodes from the replace pattern 
    mutable Set< TreePtr<Node> > duplicated_pedigree; // Nodes generated by duplication in replace 
    mutable Set< TreePtr<Node> > keyed_pedigree;      // Nodes found in coupling keys, essentially the input
    
    virtual void GetGraphInfo( vector<string> *labels, 
                               vector< TreePtr<Node> > *links ) const;

    static void SetMaxReps( int n, bool e ) { repetitions=n; rep_error=e; }
    const CompareReplace * GetOverallMaster() const
    {
        const CompareReplace *m = this;
        while( m->master_ptr )
            m = m->master_ptr;
        return m;
    }

private:
    bool is_configured; 
    static int repetitions;
    static bool rep_error;
private:
    // MatchingDecidedCompare ring
    friend class Conjecture;
    void FlushSoftPatternCaches( TreePtr<Node> pattern ) const;
public:
    // Compare ring (now trivial)
    bool Compare( const TreePtrInterface &x,
                  TreePtr<Node> pattern,
                  bool can_key = false ) const;
    virtual bool IsMatch( TreePtr<Node> context,       
                          TreePtr<Node> root );
public:
    TreePtr<Node> BuildReplace( TreePtr<Node> pattern ) const;
private:
    void KeyReplaceNodes( TreePtr<Node> pattern ) const;
    TreePtr<Node> ReplacePhase( TreePtr<Node> x ) const;
    // implementation ring: Do the actual search and replace
    bool SingleCompareReplace( TreePtr<Node> *proot );
    int RepeatingCompareReplace( TreePtr<Node> *proot );
public:
    // Functor style interface for RepeatingSearchReplace; implements Pass interface.
    using Transformation::operator();
    void operator()( TreePtr<Node> context, 
                     TreePtr<Node> *proot );

	friend class NormalAgent;
};


class SearchReplace : public CompareReplace
{
public:
    SearchReplace( TreePtr<Node> sp = TreePtr<Node>(),
                   TreePtr<Node> rp = TreePtr<Node>(),
                   bool im = true );
                   
    virtual void ConfigureImpl();                 
                    
    virtual void GetGraphInfo( vector<string> *labels, 
                               vector< TreePtr<Node> > *links ) const;
};


/// Coupling slave can read the master's CouplingKeys structure
struct CouplingSlave 
{
    virtual void SetCouplingsMaster( CouplingKeys *ck ) = 0;    
};

struct SlaveBase : virtual CouplingSlave, virtual InPlaceTransformation, virtual NormalAgent
{
    virtual TreePtr<Node> GetThrough() const = 0;
	virtual void ConfigureImpl() = 0; // For master to trigger configuration
};

template<typename ALGO>
struct SlaveIntermediate : public SlaveBase, public ALGO                                 
{
	SlaveIntermediate( TreePtr<Node> sp, TreePtr<Node> rp ) :
		ALGO( sp, rp, false )
	{}
    virtual void SetCouplingsMaster( CouplingKeys *ck )
    {
        ALGO::coupling_keys.SetMaster( ck ); 
    }
    virtual void GetGraphInfo( vector<string> *labels, 
                               vector< TreePtr<Node> > *links ) const
    {
        labels->push_back("through");
        links->push_back(GetThrough());
        ALGO::GetGraphInfo( labels, links );
    }
    virtual void ConfigureImpl()
	{
	    ALGO::ConfigureImpl();
	}		
};

template<typename ALGO, class PRE_RESTRICTION>
struct Slave : SlaveIntermediate<ALGO>, Special<PRE_RESTRICTION>
{
	SPECIAL_NODE_FUNCTIONS

	// SlaveSearchReplace must be constructed using constructor
	Slave( TreePtr<PRE_RESTRICTION> t, TreePtr<Node> sp, TreePtr<Node> rp ) :
		through( t ),
		SlaveIntermediate<ALGO>( sp, rp )
	{
	}

	TreePtr<PRE_RESTRICTION> through;
	virtual TreePtr<Node> GetThrough() const
	{
		return TreePtr<Node>( through );
	}
};

// Partial specialisation is an arse in C++
template<class PRE_RESTRICTION>
struct SlaveCompareReplace : Slave<CompareReplace, PRE_RESTRICTION>, virtual Node
{
    SlaveCompareReplace() : Slave<CompareReplace, PRE_RESTRICTION>( NULL, NULL, NULL ) {}      
    SlaveCompareReplace( TreePtr<PRE_RESTRICTION> t, TreePtr<Node> sp=TreePtr<Node>(), TreePtr<Node> rp=TreePtr<Node>() ) :
        Slave<CompareReplace, PRE_RESTRICTION>( t, sp, rp ) {}
};

template<class PRE_RESTRICTION>
struct SlaveSearchReplace : Slave<SearchReplace, PRE_RESTRICTION>, virtual Node
{
    SlaveSearchReplace() : Slave<SearchReplace, PRE_RESTRICTION>( NULL, NULL, NULL ) {}      
    SlaveSearchReplace( TreePtr<PRE_RESTRICTION> t, TreePtr<Node> sp=TreePtr<Node>(), TreePtr<Node> rp=TreePtr<Node>() ) :
        Slave<SearchReplace, PRE_RESTRICTION>( t, sp, rp ) {}
};


// The * wildcard can match more than one node of any type in a container
// In a Sequence, only a contiguous subsequence of 0 or more elements will match
// In a Collection, a sub-collection of 0 or more elements may be matched anywhere in the collection
// Only one Star is allowed in a Collection. Star must be templated on a type that is allowed
// in the collection. TODO a restrict pattern
struct StarBase : virtual Node, virtual NormalAgent 
{
    virtual TreePtr<Node> GetPattern() = 0;
    bool MatchRange( const CompareReplace *sr,
                       ContainerInterface &range,
                       bool can_key );
};


template<class PRE_RESTRICTION>
struct Star : StarBase, Special<PRE_RESTRICTION> 
{ 
    SPECIAL_NODE_FUNCTIONS 
    TreePtr<PRE_RESTRICTION> pattern; // TODO rename to "restriction"
    virtual TreePtr<Node> GetPattern() 
    {
        return pattern;
    }
};

};

#endif

