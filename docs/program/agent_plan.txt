Detailed plan for refactoring into agent patterns

---NOTE: all steps here to be applied equally to search as well as replace---
---NOTE: ignore the numbers, the order as listed is believed correct---
1. all patterns wrapped by NormalAgentWrapper (except embeddeds, which jump ahead to 4) DONE
2. initial invocation via agent interface  DONE
11. Better method of deciding whether wrapper needed (prefer not to need a pure virtual in Node class for this) DONE
- Derive all special nodes from NormalAgent instead of relying on NormalAgentWrapper (mostly to smoke out problems) DONE
- Get rid of ConfigureNodePtrThis() DONE
- Add AsAgent() and AsNode() STATIC functions in Agent (move impl from MakePatternPtr). DONE only AsAgent, reasons given below DONE
  NOTE: Experiment with shared_ptr vs SharedPtr vs TreePtr for the returned agent. Start with SharedPtr, I think this is most correct.
  --- actually no, hopping between different kinds of smart pointers to the same things breaks smart pointer rules. We must only
      convert TreePtr<Node> into Agent * (and only for immediate use). We should never convert back again
- Walk all pattern nodes and Configure() with sr and couplingkeys - do this during SR Configure(). DONE
  NOTE: Set current sr on embedded node itself and recurse into through, but not embedded_search or embedded_replace (embedded's own walk should do them)
- EXTRA STEP: mend configure-happening-too-soon-on-saves by configuring embeddeds during enclosing config (but check for any explicit calls on embeddeds in the steps) DONE
  NOTE: use shaken-down recursive style here, to set a precident for how the main algo will eventually work
  NOTE: shaken down means note what the 1-st level embeddeds are in a list, and recurse directly from enclosing Configure to embedded Configure AFTER the pattern walk, not during.
  NOTE ALSO: Got to do embedded before enclosing because some nodes appear in both and enclosing should get priority
- EXTRA STEP: do not pass NULL as a pattern into DecidedCompare (as in NULL wildcarding) DONE
3. all invocations via agent interface, use AsAgent and call on the agent, not self DONE 
- Remove "const" from all agent API functions DONE
- For abnormal context searches, move MatchingDecidedCompare() and Compare() into NormalAgent DONE
- For soft nodes, provide a thunk in the base class for calls back into main S&R (so soft algo is fully enclosed from agent network) DONE
- Additionally for soft nodes, do not pass in sr and use the sr in the Agent config instead (prove they match?) 
- Once you think this is done, start asserting that pattern==this in the major functions DONE
- Convert Couplings to index using Agent * not TreePtr<Node> DONE
- Note we cannot actually create a TreePtr<> from a normal pointer, so must first convert all the dyncasts to normal pointers DONE 
- In BuildReplaceNormal() which duplicates pattern into output tree, use Clone() so that even identifiers are re-constructed (do not want agents in output tree) DONE
5. pattern parameter (to BuildReplace and DecidedCompare) to be deduced from "this" locally, not passed in DONE 
---now you are technically distributed (=object-based paradigm), yay, but lots of tidying up to do...---
- Insert an AgentCommon class (between Agent and NormalAgent) for handy stuff needed by NormalAgent as well as the special ones DONE
- move the pre-restriction check into AgentCommon, based on an ARCHITYPE passed to the constructor NO NEED!
- NormalAgent, NormalAgentWrapper and MakePatternPtr to get own source file DONE
6. Special node functions in NormalNode to be moved into the special nodes themselves (and just derive from AgentCommon) - give them own source files DONE
   NOTE: can remove the dynamic_cast checks for these special agents
   NOTE: get the AgentCommon into the non-templated XBase and rename it to XAgent - these will be the 
   "generic" agents and the templated versions of X will just be a "concretisation" that bring in normal-nodes-in-pattern and compile-time-type-safety concepts
- Try to move the compare functionality (at least LocalCompare()) into the agent for Star (replace is already OK for Star) DONE
   ---now the choice of algorithm is decide by vcall not if-elseif chain (=object-oriented paradigm)
- Consider alternatives for the SpecialNode hierarchy, and make sure you don't break pre-restrictions (might already be broken for Stuff)
- Tidy up: sort out Stuff-specific code in SR configure walk DONE; Check out the other
  uses of TerminusBase which apparently should not work since not detected during replace... mend or remove.DONE
7. keynodes to be remembered by agents (all of thm) in AgentCommon, not passed in or looked up in central coupling keys DONE
   object. Do not pass around. Sort out sometimes needing to pass keynode to child node during replace. DONE
8. Central couplingkeys object to be pensioned off, and remove from Configure(). DONE
- Same for the dirty grass, try to keep the state locally. Check for other state in SR that should be in the agents
---now agent to agent calls are context-free and parameterless in the case of BuildReplace()---
- Slave tidy-up. Introduce Engine class containing the parts of CompareReplace needed by embeddeds and invoke from embedded agent. DONE
- Slaves: try to invoke them from SR AFTER enclosing replace has finished. Only need to do 1st level, and recursion will take care of the rest. see [1]
  This probably means filtering the immediate_agents set to embeddeds only and holding on to it.
  NOTE: this is shaken down style, wher embedded SR is invoked directly from enclosing SR, AFTER the replace walk not during
- Conjecture: add fu to allow abnormal context compares in all the styles currently in use with just calling DecidedCompare()
  These include: calls to Compare() as seen in MatchAny, a local DecidedCompare as used in NotMatch, a local DecidedCompare 
  with init during configure as seen in embedded recurse restriction. Actully provided a single AbnormalCompare() in agent
  common and mapped them all through that except embedded which goes to Comapre in Engine. Now 2 seperate
  comparison top-levels, which is clearer (undoing false refactor). DONE
- Use clean_grass list rather than dirty_grass - then can use the SR::DuplicateNode and DuplicateSubtree in src/helpers/ and remove from AgentCommon
---now the sr passed in via Configure() is nearly or completely unnecessary making the agents reasonably self-sufficient---
- Note: don't kill the Configure sweep since needed for various things now not just sr and couplingkys pointers
9. Turn the boolean soft agents into proper agents. Maybe lose MatchEven if no users? Or becomes MatchOne? DONE
---End of original plan, now properly in agent form ---
10. Agent impls to build up a "links store" of child agents and corresponding program nodes and move the
    actual DecidedCompare calls to the end of AgentCommon::DecidedCompare. 
 - Move the links from MultiMap to Set, since cleaner and can use union etc DONE
 - Requires storing a "threshold" from couplings, to avoid iterating invalid descisions that previously
   would not have been registered due to an earlier mismatch (nodes with multiple decisions). Maybe route 
   HandleDecision through AgentCommon so no algorithmic change needed to agent impls. NOT DONE - deferred
 - Deal with remaining direct overloads of DecidedCompare so they are all ringfenced (extra layer; key as return value?).
 - Bring the looping through the links part out into a new recursive function in Engine DONE
 - Rename remaining agent funcitonality DecidedQuery...() DONE
--- Recursive comparing walk is now centralised to the engine, in an agent-independent form ---
11. Store agent pointer and count of decisions for that agent in first decision for that agent DONE
 - Pass vector of choices into agents, length as stored in as the "conj" (maybe rename), process in
   AgentCommon and then pass back a vector of choices in the Links object. DONE
 - Pass the vectors of choices into KeyReplace(), and get Stuff to key itself here. DONE
 - Prove that Stuff and no other nodes require keying beyond what AgentCommon does for them DONE with some refactoring
 - Move keying out of agents and into Engine, using a map of agent onto key for now DONE
 - Pass enclosing's coupling set to embeddeds, so we do not rely on the KeyReplace() keyings for embeddeds, so that
   KeyReplace() keyings are only relied on for the imminent replace, not for embedded searches. DONE
 - Use const ref for the enclosing couplings when passed around in Engine DONE
 - Find and try removing the self-keying in the search side (enclosing replace - was only being used to pick up enclosing)
 - Check that the Agent's query functions are "const" (choices and links member mutable). DONE
 - Check for modifiers of Engine (via engine ptr) too - hopefully does not need to be mutable. - WAS const ALREADY
--- Agents may now be queried idempotently ---
   **UNSURE ABOUT THESE...**
12. (done before documentation)
 - Add evaluator objects for boolean nodes other than AND. Invoke it in Engine.
 - Do not union the enclosing and local keys - treat seperately
 - Track agents seen in a particular pass. This permits early-out on couplings whether matching or not
 - Move couplings check down into parent's DC
 - Remove soft agents
 - Make Graph appearance a virtual interface on Agents
 - Prototype a RegionAgent that could represent a non-AND-rule region. 
 - Add Agent API support for combined decision and link registering
13. Coupling push
 - Collect keys for sub-agents before DecidedQuery call based on pattern query. 
 - Pass them into DecidedQuery alongside choices
 - Allow RememberDecisionLink to short-circuit (but only if keys are inside ranges - may need more find() 
   support and reporting of decisions by container instead of begin/end pair)
14. Seperate Engine instances for abnormal/evaluator contexts; should never recurse Compare on a 
    particular Engine instance (ASSERT this?)
16. Solution for abnormal contexts (multi-hit AND evaluator)
 - Demonstrate that couplings are never used
 - Code to check this in a Configure pass
 - Then just use a local Engine instance and tuck away in a wrapper around DecidedQuery (so abnormal flag never gets out as true)
15. Regions for evaluators
 - Create a Configure pass that substitutes RegionAgents for evaluator contexts up to couplings.
 - Leave outgoing links unchanged - just fill in the enclosing keys for them and the Engine will stop
16. ???  

QUESTION: should patterns eventually refer to each other via TreePtr<Agent> instead of TreePtr<Node>? 
And does that even work, or should it really be shared_ptr<Agent> or SharedPtr<Agent>? --- requires experimentation, added to plan
-> Explicit Agent crosslinks should be done via Agent * pointers. But eventually all the work
will be done by other objects that are contained by the agents, and shared_ptr should be used
to tie the existance of theses (maybe indirectly) back to the agents.

What are the Agent configs used for?
 - Configure couplingkeys is used to get to the central CouplingKeys for storing and retrieving keyings. Step 8 removes need.
 - Configure sr is used for :
	 - reaching common GetContext() for embeddeds replace (context is true program root, and this passes it into embedded SR)
     - passed to soft search pattern nodes, for calling back into search I think, eventually want to pass the Agent for step 3
	   NOTE: also needed for GetContext() which is the "true" program root, needed by eg GetDeclaration() 
	 - to get to a central dirty grass list - again, could dirtiness be stored locally?
	 - passed into Star's MatchRange, so that a fresh call to Compare can be made with the restriction pattern (so as to avoid coupling keys I think)
   
NOTE: need an answer to pre-restrictions (actually, the answer is to use the existing MakePatternPtr with templated Agents, and implement 
using an intermediate PreRestrictionAgent<> template.  ---NO, we insist that the Agent classes are not templated (except wrapper) so must use ARCHITYPES

The real question is, how to do pre-restriction propogation, where a special node's child pointers are the pre-restriction class, enforcing 
type-safety on their children relative to their declared type. We can insist that all such child pointers are really PreRestrictionAgent
ONLY IF the NormalAgentWrapper uses (derives from) PreRestrictionAgent, so that normal nodes (once wrapped) can be pointed to. --- not an issue;
where special nodes expose members that point to children (through, terminus etc) these remain the same and are already safe. AsAgent() 
converts them as required (it drops the node type but don't care; already safe)

[1] The anatomy of a embedded
SlaveCompareReplace is a special Node, Agent and CompareReplace object in its own right.
The Agent/special Node is understood to be a part of some other CompareReplace's pattern (the
enclosing), and "surrounds" its own CompareReplace object. However, we don't need to hide the embedded SR
from the enclosing SR as they're both the same class... So the plan is for the enclosing sr to "seek out"
embeddeds in the tree and invoke them as required. Slave will need to tell enclosing SR where to act
in the newly generated output program tree. Could multiple embeddeds of the same enclosing be run
concurrently? Yeah, probably, lol.
TODO make CompareReplace a member, on the end of a pointer or shared_ptr. Then it will not interfere 
with Itemise(), and an ordinary walk will not go into the children.


Original note on couplings and abnormal contexts:
	A pass reaches a RegionAgent for an evaluator context. The region agent registers whole-domain 
	decisions for all couplings OUT of the evaluator context and gets choices. It links out back
	into the surrounding context with these choices, and they are therefore evaluated using the 
	global AND-rule. But this is CORRECT! Since a coupling must include at least one normal 
	context, that normal context will restrict the entire search to successful matches of the
	subtree at the coupling point. We then additionally restrict according to the output of
	the evaluator.

Basically, the presence of a normal context in every coupling, taken together with the global
AND-rule that prevails in normal contexts, means that the coupled node itself and the subtree 
under it must match SOMEWHERE for an overall match to be possible. Thus the evaluator
context's rule is something like:

GIVEN coupled nodes keyed xi and matching, IS the evaluator(xi) satisfied?

Thus, a "region" can be described around an evaluator node that ENDS at the couplings. It must
cautiously offer a whole-domain decision at each coupling, but then the engine for the surrounding
pattern can take care of further matching for these nodes. Thus, couplings can be presented in the 
usual way, with no extra baggage, and the "consequences" of the non-AND evaluator are not seen
outside the region.

Strictly, a region will contain the OR or NOT node itself, and he abnormal contexts, within the 
region, are the subtrees at each pattern. Both the region and the abnormal contexts end at couplings.
Since the abnormal contexts are already (planned to be) farmed off to seperate Engine objects, only
the evaluator_region - union(abnormal_contexts) needs to be treated locally, which is just the
evaluator node itself, and all that needs to be done is to invoke the evaluator functor on the
results returned by the engines (once everything has ben set up).



