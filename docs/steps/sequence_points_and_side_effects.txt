Sequence points and side effects

From Wikipedia:
In C[2] and C++,[3] sequence points occur in the following places. (In C++, overloaded operators act like functions, and thus operators that have been overloaded introduce sequence points in the same way as function calls.)

   1. Between evaluation of the left and right operands of the && (logical AND), || (logical OR), and comma operators. For example, in the expression *p++ != 0 && *q++ != 0, all side effects of the sub-expression *p++ != 0 are completed before any attempt to access q.
   2. Between the evaluation of the first operand of the ternary "question-mark" operator and the second or third operand. For example, in the expression a = (*p++) ? (*p++) : 0 there is a sequence point after the first *p++, meaning it has already been incremented by the time the second instance is executed.
   3. At the end of a full expression. This category includes expression statements (such as the assignment a=b;), return statements, the controlling expressions of if, switch, while, or do-while statements, and all three expressions in a for statement.
   4. Before a function is entered in a function call. The order in which the arguments are evaluated is not specified, but this sequence point means that all of their side effects are complete before the function is entered. In the expression f(i++) + g(j++) + h(k++), f is called with a parameter of the original value of i, but i is incremented before entering the body of f. Similarly, j and k are updated before entering g and h respectively. However, it is not specified in which order f(), g(), h() are executed, nor in which order i, j, k are incremented. Variables j and k in the body of f may or may not have been already incremented. Note that a function call f(a,b,c) is not a use of the comma operator and the order of evaluation for a, b, and c is unspecified.
   5. At a function return, after the return value is copied into the calling context. (This sequence point is only specified in the C++ standard; it is present only implicitly in C.[4])
   6. At the end of an initializer; for example, after the evaluation of 5 in the declaration int a = 5;.
   7. Between each declarator in each declarator sequence; for example, between the two evaluations of a++ in int x = a++, y = a++[5].
JSG: also the condition of an if etc
JSG: also CompoundExpression as with Compound
JSG: maybe add the end of evaluation of the parameters to intrinsics
 


Side effects are (from memory):
 - Assign
 - Assignment operators
 - Post- and pre-inc
 - Function calls 
 - Possible some intrinsics (but these are statements)


Sequence point rules must be observed in all transformations. But they are complicated, so invent Simple Sequence Points (SSP) style:
 - Sequence point inferred by Compound and CompoundExpression must be respected (i.e. sequence points inferred by semicolons)
 - So to get to SSP we can insert ; wherever we see a sequence point
 - Sequence points not co-incidnet with ; (ie all the other ones) will have only a direct usage of a temp variable, guaranteed to be
   free of side effects.
 - We can get here by introducing temps and setting them up in an earlier statement, so a ; exists between setup and usage i.e.
   x SEQ y becomes temp=x; temp SEQ y
 - Note innermost sub-expression is the one that moves up
 - Where nesting means multple SEQ, do outermost first (outermost defined by tree structure I think) - because of sequence point rules
   x SEQ (y SEQ z) means do x first, then y and then z - this differs from precidence!
 - expressions, if, switch, calls, returns, intrinsics all easy
 - But loops are hard, we would need to get in before *each* evaluation of the loop expressions
 - OTOH we've probebly lowered loops by the time we need this; definite fors don't have side effects anyway

We can apply "light touch" to this with Simple Challenged Sequence Points (SCSP):
 - Challenged means there's definitely or probably a side effect in x
 - Only expand challenged sequence points
 - just leave other cases since they're safe

We could go further and look for conflicts between the side-effect and the code after the seq point, but this is probably going too far
as a light touch thing. Better to search for parallelism globally ie including across ;

In general, if we're in SSP or SCSP
 - respect semicolons as sequence points
 - introduce no more side effects

Note on post-increment: same algorithm - the rules seem to suggest that eg x++ && x is equivalant to temp = x++; temp && x
 
We can insert a base for SideEffectyExpression or some such - under SSP we only care about side-effecty expressions since statements
always end in ; and will therefore be assumed side-effecty anyway.

Detecting sequence points is harder because only certain children of the nodes need to be checked for side effects eg operand[1] of &&, ||, ?:,
only the condition of an If etc. Maybe should write one step for operators and then seperate ones for If etc as required.

Note: where a side-effect is buried in an expression (seq point-less), I think we can choose whether to move the whole expression or 
just the side effecty part - check this! If there are multiple side effect buried in the expression, then moving the whole expression 
is more economical because it gets all the side effects, as well as clarifying that the side effects are indeterminate in order and
thus parallelisable.

----- additional notes ------

OK, thought about this some more.

Firstly, need to determine whether syntheisable Verilog can deal with side effects. What does verilog do with eg x++ && y++? Maybe we can 
leave some side effects in place, allowing a lighter touch. If so, I think we're interested in un-combable subexpressions, since these are the
one we must move out. This suggests Simple Uncombable Sequence Points (SUSP), in which we only break down sequence point expressions when they 
contain uncombable subexpressions. If Verilog is OK with stuff like assigns and assignment operator and pre/post inc, then the only uncombables
in expressions are function calls (and pre-existing compound expressions) - these must always be assumed side-effecty. So only limited value in actually analyzing for 
side effects in conjunction. i.e. x SEQ f() is safe to move f(), but we may as well break it down anyway to keep the transformations simpler.

I have also been forgetting the elephant in the room wrt && || and ?: which is that the right hand pats sometimes do not execute at all. 
When breaking these down, therefore, we must ensure ifs are inserted to correctly conditionalise execution. This obviously needs to happen
above if lowering. So we actually get a new step for each of the three, positioned among the construct lowering. As with them, it can start 
by always breaking up these constructs (SSP), and then can be made lighter alone with the rest of them when combability checks are added (SUSP)
(assuming Verilog can handle combable side-effects).

Note: side effects could get moved up or down in general. So eg x++ && x could become x && x; x++ which is wrong. Conversely, x && ++x could
become ++x; x && x also wrong. Assign and assign ops are like ++x, but because of x++ and the possibility we might need to expand it in 
inferno (if verilog doesn't handle), I think all positions within &&, || and ?: should be checked for side effects and/or uncombables

Lets go over the list of sequence points again:
1. Expanded by new LowerBooleanAnd/Or always in SSP and where side effect is contained on either side. In SUSP expand if there are any uncombables.
2. As 1 using LowerConditionalOperator
3. This is the invariant defined by SSP/SUSP, must be respected by all steps. It corresponds to the principle of sequentially executing 
   statements in a Compound block, an existing requirement.
4. ParamsViaTemps moves param expressions up and when it runs, calls are always at statement level. This satisfied SSP/SUSP
5. ReturnViaTemp moves return expression up; return is a statement; updating the temp suffices for "copied into the calling context" (a 
   little ugly implementation detail leaking into the language spec, methinks)
6. This is a statement so satisfies SSP/SUSP. We just need to ensure that no non-trivial inits, that might be side-effecty or uncombable 
   get into the members collection since this is unordered. I think present behaviour is OK.
7. These get broken down at parse into seperate statements, satisfying SSP/SUSP.
If etc: OK since the first statement in the body or after the construct is a seperate statement under the SSP/SUSP invariant
CompoundExpression: actually a bit hard: if we lower with construct lowering, we'll re-introduce lower down. More below [1]
Intrinsics: I think these sort themselves out when we expand them into their definition, except that we'll often do that below
   the construct lowerings. Hmmm

[1]Maybe define the semicolons here as SSP/SUSP invariant sequence points, and expand at the lower position. OR maybe we can 
   exchange the entire functions subphase with the entire construct lowering subphase, then it would be neater. But expanding
   the conditions for loops is complicated, I'd rather lower away all loops before doing the expansions that are already
   there for funciton calls. So the overall order should not change. As long as we are happy that SSP/SUSP compliance makes 
   CE expansion safe, then we can do this whenever we want. I think to be safe the result must mediate through a temp, to ensude
   that the SeqP following the last statement of the CE (which is really its return value expression) remains in place. Otherwise, 
   we'll merge that last statement into the surrounding expression, losing a Seqp. So eg ({x++;}) && x becomes x++ && x which
   is probably wrong and breaks SSP/SUSP rules.


