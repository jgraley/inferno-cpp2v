
(C) Copyright 2006 John Graley
Available under the terms of the BSD license. 

Overall program design 

Input parsing -
-------------

The input language will be C++ and will include whichever language elements are
present in the 1997 ANSI spec and are supported by GCC4. 

The input program will be preprocessed using clang's pre-processor and then
parsed using clang's front end. Minimal modifications are expected to be needed 
to these.

Inferno will implement a set of "parser action" methods that will be invoked 
by clang as it parses the input source code. Inferno will build a tree within 
these methods. This requires Inferno to perform tasks such as identifier 
tracking and scope resolution.

Inferno's internal process
--------------------------

The program transformations will proceed in a number of steps which modify the
representation as required. 

These modifications may introduce program elements not found in C/C++,
including
- syntax or structure that would be illegal in C++
- explicit primitives that relate to SystemC language extensions
- explicit primatives for Verilog language elements
- other explicit primatives as required by inferno's intermediate representation

The transformation steps implement the transformations given in the design/steps
directory. Each must map the program from one valid and testable form into
another valid and testable form whereby
- both programs behave identically modulo size and space and
- the resultant program satisfies some new invariant as well as preserving all
existing invariants

Speed of the tool is not a high priority, and therefore ease of coding is
considered more important. 

The transformation process may optionally be stopped early after any stage.


Output generation (rendering)
-----------------------------

The inferno program will provide the option to render output in source form
or in dotty language for the Graphviz tool. The source form renderer will 
generate Verilog, SystemC and C++ and render the new explicit primatives 
in a manner suitable for testing (eg calls to simulation functions).

The final transformation step and Verilog source output should generate
synthesisable Verilog-2001 that is compatible with a nominated version of Icarus
Verilog (version will be latest stable release at the time the code is
written). 
  

Testing
-------

Testing will be achieved by building a collection of C++ programs that may be
used as input, beginning with simple example programs and ending up with
something similar to a compiler verification suite. 

Each test program will run and generate some result as the 8-bit return 
value of main(). 

Each test program will be compiled and executed to determine its behaviour - the
result from this run becomes the expected result. For each step in the
transformation, the program is transformed up to that step, saved in source
form, compiled and executed. The result of this is compared with the expected
result.

Depending on which step we are testing, the method of compilation may be
GCC4, GCC4 with SystemC libraries and maybe other simulation extensions specific
to inferno, or a Verilog simulation.

Note: we cannot use files or stdin/stdout because these are not meaningful 
in synthesisable verilog and could be problematic in a parallelised system.
Initially, the inputs to the test program will be embedded as literals, but
there could be a problem with agressive optimisations reducing the program
to triviality. If this seems to be happening, we can try to use the arguments
to main().

