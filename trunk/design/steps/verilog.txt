(C) Copyright 2006 John Graley
Available under the terms of the BSD license. 

Verilog phase - steps that address HDL-specific (or Verilog-specific) language
elements.

This phase deals with aspects of Verilog that need to be addressed specifically
in order to ensure that our output is valid and synthesisable. At present, it is
somewhat incomplete and the examples are not necessarily correct. 

Basically, we have a single step that actually switches languages from SystemC
to Verilog. We try to ensure that this step is a simple trans-literation by
performing preparatory SystemC transformations first. The output of this step
should be simulateable for testing, but it does not need to be synthesisable or
in any "preferred" style (ie free of latches).

Later steps fix up style issues and make the verilog synthesisable.

We need to convert the subset of C types that are still in use into Verilog
types. It could be argues that to use any non SystemC types in a SystemC program
is bad style, but it works and is easy. Our only incentive for using them across
the board is that we will subsequently move to Verilog, which is why it is in
this phase.

The conversion to Verilog itself is a transliteration as mentioned above. The
Gimple extensions fir SystemC and Verilog will be distinct, but will map fairly
directly on to each other. For example, the weighty SystemC SC_CTOR function
will be represented as a primitive, not as code, so there is no need to attempt
to induce its meaning. 

Unwanted Verilog features (like the ability to confound and infuriate
maintainers with backwards or floating vector bit numbering) will be concretely
bypassed according to written conventions in the design docs.

Verilog supports, to some extent, variable semantics similar to those of C++ in
the sense that if you overwrite a variable, the overright takes effect
immediately and if you don't, you get the old value which has been stored for
you. However, in general this leads the synthesiser to infer latches which are
considered bad style. It is possible to build latch-type behaviour on flip-flops
using pseudo-latches, and so we do this before outputting the final Verilog.

@todo finish this phase! Maybe see what sc2v does?

The steps in this phase follow...

----------------------------------------------------------------------------
Lower types

Convert fundamental types into SystemC bit vectors. Signed typed become sc_int<>
of the correct size. Unsigned types become sc_uint<>. bool becomes sc_bit.
Support bit fields properly. Enums should become sc_uint<> at a size determined
by the maximum defined value for the enum. There should not be any pointers at
this stage.

Invariant: no types unknown to Verilog

Note: we will hopefully be able to tolerate arbitrary bit vectors in SC form eg
sc_uint<5> all the way through the process. @todo check

Note: OK, these aren't actually verilog types, but they map directly.

Example output:

class A
{
    sc_bit initialised; // was bool initialised;
    sc_uint<5> state; // was enum { ... 25 things ... } state;
    sc_int<32> number; // was int number;
    
    ...
};

----------------------------------------------------------------------------
Go to Verilog

Transliterate from SystemC to Verilog. Use Verilog 2001. Each class should
become a module definition and each obejct a module instance in the corresponding
position in the hierarchy. The run (process) function for each class should
be placed in a clocked "always" block within the corresponding module.

Invariant: program is now Verilog

Note: from here on we use a Verilog simulator such as Icarus Verilog to render
test programs.

Note: bit vectors are always numbered [N-1:0]. Backward numbered bit vectors 
are a hateful contrivance.

Example:

SC_MODULE(A)
{
    sc_port<sc_bit> port; 
    
    sc_int<32> number;
    
    SC_CTOR(A)                 // This whole block is internally 
    {                          // represented as a primitive along the
        SC_THREAD(f);          // lines of
        sensitive << port;     //     PROCESS( SC_THREAD, port )
    }                          // in the declaration of f() 
    
    void f()
    {
        number=9;
    }
};

becomes:

module A( input port )

    reg [31:0] number;
    
    always @(port)
    begin
        number = 9;
    end

endmodule

@todo fix numerous errors in example

----------------------------------------------------------------------------
Unport internals

Where module ports are only connected from inside the module (as will happen
when an object contains a non-trivial member object), turn these ports into
wires and remove them from the module interface. 

Only do this when none of the instances of the module use the ports - so that
the same module definition may be used for all objects. 

Note: at present, this step appears to be an optimisation. But it is important
to be clear that C++ requires functions to be in a class's public interface 
before member objects can call them, wheras Verilog modules can keep connections
to sub-modules completely internal.

todo: consider using a designation approach rather than examining usage in order
to decide which wires to make internal - basically labelling the "internal" 
function calls in some way and then propogating the information down to this step
and of course asserting that there really aren't external connections to the ports
thus labelled.

----------------------------------------------------------------------------
Resolve latches

Introduce a pseudo-latch wherever Verilog would infer a latch. A pseudo-latch is
a contrivance based on a flip-flop and a multiplexer that behaves like a latch
(at least in a synchronous environment).

Note: the pseudolatch uses the reg in such a way that Verilog infers a flipflop
for it, not a latch.

@todo design the pseudolatch and show how to decide when one is needed.

