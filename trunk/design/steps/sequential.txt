(C) Copyright 2006 John Graley
Available under the terms of the BSD license. 

Sequential phase - steps that deal with intra-object code, including stating-out
and recursion.

This phase contains the recognisable transformations that implement sequential
algorithms by spacing a number of combable operations out over time.

Our input consists of a number of objects connected up by wires (sc_signal) and
we act upon each object individually. An object resembles a simplified computer
and runs in a local context (SC_THREAD). In addition to user functionality, the
objects contain generated code from all three previous phases. In particular,
the structural phase generates significant executive and protocol marshaling
code. This is why the present phase occurs late-on in the transformation
process; we can generate functionality in sequential C style and let it pass
through this phase, instead of trying to generate the Verilog directly for the
new functionality.
 
Broadly speaking, the phase begins with steps that correspond to compilation
(some more closely than others) followed by steps that introduce the minimal
computer-like infrastructure required to execute the compiled program. Viewing
the phase in this way leads us to question what instructions are available, to
which the answer is that any combable block of code found in the initial object
algorithm can become an instruction. However, there is no fundamental reason for
compilation and computer recreation steps not to be swapped around if that
helps.

We firstly merge all the functions in the object into a single one. This
corresponds to the linking performed by a software toolchain. We bring it out to
near the start of the phase because it is reasonably separable, and the
remaining work is simpler. In particular all recursions are just calls back to
the merged (big) function - so the recursion call pattern is simplified.

We now perform the classic compilation task of lowering constructs such as while
loops down into conditional gotos (a goto in an if). Gotos and labels will later
turn into state transitions, therefore anything we lower to gotos will get
stated out. We can also sometimes leave constructs in place in which case they
will appear in the output Verilog and hence be combed-out during synthesis.
Therefore this step decides what gets stated and what gets combed.

Switch statements demand special attention - we choose to use a lookup table
followed by a "goto a variable" primitive to get to the right case. In the ideal
situation, the lookup can be optimised to identity by choosing matching label
(=state) values and the goto-a-variable will just copy the variable over the
state.

We remove recursion by simply arranging to jump back to the start of the
function instead of (re-)invoking it. This requires that we have an explicit
stack (which we already have courtesy of the data phase) and an explicit state
variable so that we can use the "goto a variable" primitive to implement return.
We do not wish to actually state out before this step, so instead we insert the
state variable in parallel with the gotos and labels just before doing this step
(so that it is available for return).

We now have a single function in each object that will be called once at startup
and will simply execute forever - not calling any other functions and not being
called by any other functions. 

When we state-out, we choose to create a state for each label. The states are
reached by means of an overall switch statement and gotos are implemented by
assigning a new value to the state variable. The overall switch statement must
be iterated indefinitely but this is the behaviour of SC_THREAD anyway, no no
actual loop needs to be created. 

Since a state may contain conditional gotos followed by code, we need to place
that code in an else clause of the if otherwise it will get executed when it
shouldn't when the gotos are removed. We do this just before state-out.

State-out may be regarded as turning a program that is manifestly implemented as
a series of combable sections of code (similar to machine instructions) into a
microprocessor implementation that may execute any such instruction at any time
and chooses which one to execute based on stored data (the state variable, which
may be regarded as analogous to a program counter).

Finally, we move from SC_THREAD via SC_CTHREAD to SC_METHOD in a few simple
steps. First, we replace all minor delays with a single one at the end of the
function, then convert it according to process model: we have delay() under
SC_THREAD, wait(clk) under SC_CTHREAD and nothing under SC_METHOD. These steps
progressively define the synchronous timing model, and would differ
substantially in an asynchronous implementation.

Once we reach SC_METHOD, we have got rid of the need for a local context.
Furthermore whenever SystemC invokes our code, it will perform only nominally
instantaneous actions which (a) are combable and (b) do not violate protocol
rules by causing combinational loops. Note that this is distinct from the
situation before local contexts were introduced, where a function could run for
as long as it wanted and possibly indeterminately.

TODO turn early returns into assign-to-local and goto end. Real return
comes at end. Invariant is no early returns.

The steps within this phase follow:

----------------------------------------------------------------------------
Add poll loops

Replace all wait() calls with a poll loop that checks the condition repeatedly.
Insert a minor delay into the loop in order to explicitly spread it out over
time. This is really associated with "add clock/reset" but we do it up here 
so we can state-out the loop.

This step arguably finishes off the protocol generation step. However the choice
of a poll loop as a way of waiting for an event is a matter of object
implementation and whereas wait-for-event is fairly generic, a poll loop is 
quite a specific sequential construction.

Invariant: our reliance on SystemC eventing is hidden and the need for poll
loops made explicit.

Note: we may not need this if using asynchronous technology. State-out should be
able to still work if we skip this step leaving wait(x) in place of delay()
loops.

Example output:

void f()
{
   // x is some event or group of events
   while(!x) delay(); // used to be wait(x)
}

----------------------------------------------------------------------------
Merge member functions

Merge all the member functions in a server into a single one that uses a big
switch statement to select the implementation based on a new enum parameter.
Parameters of the original functions should be grouped into a struct for each of
the original member functions then unioned together for the big function. Return
value should be handled similarly.

Invariant: all calls are simple recursions on the big function (apart from
SystemC primatives) since there's nothing else to call.

Note: this single function is now the server's run (process) function. Since
SystemC expects the run function to be void(void) we will have to add a
primitive to forward the call. The "which" enum value supplied should be 0 for
the run function; this thunk can be removed after flattening recursion.

Note: originally was before memberise locals, but that proved impossible due to
pointer lowering steps. This must be done after structural steps to ensure we
keep separate call interfaces for separate call sites (1:1 wiring).

Note: also merge the explicit stacks for the functions. 

@todo Need to stack the new locals added here 

Example output (initial functions were char f(char) and int g(int, int)):

struct g_params { int p1, int p2 };

union big_params { char f, g_params g };
union big_result { int f, char g };

enum which { F, G };

big_result big_function( which w, big_params bp )
{
    big_result br;
    switch( which )
    {
        case F:
            param = bp.f;
            ...algorithm from f...
            br.f = return_value;
            break;
            
        case G:
            param_1 = bp.g.p1;
            param_2 = bp.g.p2;
            ...algorithm from f...
            br.g = return_value;
            break;                                    
    }
    return br;
}

----------------------------------------------------------------------------
Lower break and continue

Replace break and continue with goto statements to a label determined from 
the scope. 

Invariant: no break or continue

Note: run this before loop lowerings since break/continue rules for loops
can be broken by loop lowerings.

Note: leave "standard" breaks in switch statements alone - ie breaks just
before a case, default or the end of the block.

Note: If tree intermediates for statements were created for "invisible to 
break" and "invisible to for" this can be done easily using restricted stuff nodes.

Example output:

while(a)
{
    ...
    if( x )
        break;
    ...
}

becomes

{
	while(a) // while is NOT "invisible" to break, hence label inserted immediately after
	{ // compound statements are "invisible" to break
	    ...
	    if( x ) // the if is "invisible" to break
	        goto LABEL;
	    ...
	}
	LABEL:
}

----------------------------------------------------------------------------
Lower "for" loop

Convert for loops into while loops as follows:

for( x, y, z ) {...} 

becomes

{ 
    x; 
    while( y ) 
    { 
        {...} 
        z; 
    } 
}

Note: consider leaving combable for loops in place. Such loops must be combable
in the Verilog sense and must not contain any labels, gotos or other non-combable
constructs.

Invariant: no un-combable for loops

----------------------------------------------------------------------------
Lower "while" loop

Implement while loops and do-while loops using conditional gotos as follows:

while(x) {...}

becomes

{
    WHILE:
    if( !x ) goto STOP;
    {...} 
    goto WHILE;
    STOP: 
}
       
do {...} while(x)

becomes

{
    DO:
    {...} 
    if( x ) goto DO;
}

Invariant: no while or do-while loops

----------------------------------------------------------------------------
Normalise "switch" construct

Switch statements should be left intact except for cases that
(a) contain a label or other uncombable construct or
(b) come immediately after a case that has no break (or the break is conditional)

Such cases should be replaced with a goto to a new label outside the switch 
which is followed by the code from that case. Normal program flow should bypass
this new section. break to be implemented by a goto to a label at the end of
the construct.

switch(a) 
{ 
    case 0:
        ```
        break;
    case 1:
        ...
        // fall through
    case 2:
        ,,, 
        break; 
    case 3: 
        '''  // uncombable
        break;
}

becomes

{
	switch(a)
	{
	    case 0:
	        ```
	        break;
	    case 1:
	        ...
	        goto CASE_2;
	        break; // break after goto just to make it clear 
	               // we now break at the end of *every* case
	    case 2:
	        goto CASE_2;
	        break;
	    case 3:
	        goto CASE_3;
	        break;
	}
	goto BREAK;
	CASE_2:
	    ,,,
	    goto BREAK;
	CASE_3:
	    '''
	    goto BREAK;
	BREAK:
}

Note: "default" to be handled just like any other case.

Note: Verilog terminates every case in a switch statement. When faced 
with a chain of cases that have no break, we state-out all but the 
first case. There are other ways of doing this for example each
case in an "if" or copying code from one case to another, but the
present approach keeps the switch statement intact and avoids 
duplication.

Invariant: no uncombable content in switch cases *and* every case is
terminated by a break

----------------------------------------------------------------------------
Normalise "if" construct

Only lower if statements when there is a label in the "then" or "else" code 
blocks, or otherwise uncombable. Lower such ifs as follows:

if(x) {...} else {,,,}

becomes

{
    if( !x ) goto ELSE;
    {...}
    goto ENDIF;
    ELSE:
    {,,,}
    ENDIF:
}

Note: ifs that don't contain a label could also be lowered, but avoid 
lowering the new if construct generated by lowering an if!

todo: consider only stating one block, eg the "then" or "else" blocks, if
only one block needs it.

Invariant: no uncombable ifs

----------------------------------------------------------------------------
Add state transition at minor delay

At each minor delay (call to delay()) add a "goto" to a label immediately 
following. This will force a state transition and hence a one clock cycle 
delay.

Note: we leave the delay call in there until we establish that state 
transitions really do incur a delay. Until then, the program is incorrect
without the delay() call because state transitions can be imagined to be
instantaneous.

delay();

becomes

{
    delay();
    goto DELAY; // create a state change. 
    // Maybe put a barrier here to stop this construct getting optimised away.
    DELAY:
}

----------------------------------------------------------------------------
Add state variable

Add an enum with a value for each label, add a local variable of that type
called state and maintain it correctly by assigning to it immediately before
each goto. Initialise to eg INIT_STATE at start of the function (regardless of
recursion depth).

Note: assert this at each label as a double check since we have a little
redundancy at this point. Treat ASSERT as a primitive (like the inferno assert).

Note: the state variable should be explicitly stacked.

Example output:

void f()
{
    // initialising the state
    locals[stack_pointer].state = INIT_STATE;

    
    // if( x ) goto FOO; becomes...
    if( x ) { locals[stack_pointer].state = STATE_FOO; goto FOO; }
    
    ...
    
    // FOO: becomes...
    FOO:
    ASSERT( locals[stack_pointer].state==STATE_FOO );
}

----------------------------------------------------------------------------
Expand compound statements

Compound statements (surrounded by {}) should now be mostly redundant. Get rid of
them.

Note: was part of memberise locals, but that got moved up into the data phase.

@todo we can't remove all compounds - we want to keep compounds on constructs that
have not been lowered (because they will be combed-out by Verilog) and indeed
the "else clauses" step actually adds compounds. So need a criterion for deciding
which compounds to remove. Maybe the invariant should be no compounds around labels?
Alternatively, maybe we just remove the free-standing ones, keeping ones tied
to if, switch, for etc - which would be the ones we chose to keep. 

Note: also consider local data - could we benefit from knowing its scope? This
step would tend to throw the info away.


Invariant: No compound statements (apart from overall function scope)

----------------------------------------------------------------------------
Lower parameters and return value

New local variables should be added to the stack for the parameters and
the return value. These are populated for the stack frame of the callee
(so the callee accesses them like normal locals, but the caller has to 
access them via stack_pointer+1). 

Parameters should be initialised before the call; they may then be used 
directly; return x becomes an assignment to the return value; caller 
substitutes return value for the recursion point.

Note: addition of locals for params is OK since that's what they are. It
seems unfortunate to do this for the return value, but without inlining
part of the function there's no way we can avoid it. Compilers do so when
ABIs specify eg return value in R0.

Note: I think we could just use temps.

Invariant: no parameters or return values

todo: example code

----------------------------------------------------------------------------
Lower recursion

Turn each recursion call point into a goto to the start of the function and 
replace each return statement with a goto to the label implied by the state
variable. Also do this at the end of the function if there is no return 
statement.

Invariant: no recursion; no non-trivial function calls; no params or return
values.

Note: every LABEL: must have an assert( state==LABEL_STATE ); otherwise
state-out won't work. This is why we have to duplicate the sp++ and state=INIT
for each fn call. But we're close enough to Verilog that synth tools should be
able to help ;-)

Note: the "goto a variable" primitive would have to become eg a switch statement
for the purposes of testing this step. It vanishes in the "State-out" step.

Note: at the end of this stage, the only caller to the function will be to start
the process - so can fold in the thunk we added in at function merge.

Example output:

void f()
{
    locals[stack_pointer].state = INIT_STATE; // from add state variable step
    INIT_STATE: // new label
    assert( state==AFTER_RECURSION_STATE );

    ...
    
    // used to be f();
    locals[stack_pointer].state = AFTER_RECURSION;
    stack_pointer++;
    locals[stack_pointer].state = INIT_STATE; 

    AFTER_RECURSION:
    assert( state==AFTER_RECURSION_STATE )
    
    ...
    
    // used to be return
    stack_pointer--;
    goto locals[stack_pointer].state;
}    

----------------------------------------------------------------------------
Else clauses for skipped code

Place code after a conditional goto (a goto in an if) up to the next label into
an else clause if it isn't already in one. If there is code between an
unconditional goto and the next label, it is an error (the code is unreachable).
In general, there may be more than one goto in between each consecutive pair of
labels and these gotos may be combed out so that there is a state for each
label. This could be regarded as an optimisation (compared to adding a state for
each goto), but we include it because it permits the result of state-out to
resemble what one would expect from the lower-constructs step.

The idea is to ensure that there is no code in an executable path between a goto
and the next label.

Invariant: gotos do not need to be enacted until the next label is reached

Note: at the start of this step, there should be 0 or more if(something) goto
SOMEWHERE; and then one unconditional goto SOMEWHERE_ELSE; just before the
label. If this is not true, it is an error.

Example:

LABEL1:
if(x) { state = X; goto X; }
...
if(y) { state = Y; goto Y; }
,,,
{ state = Z; goto Z; }
LABEL2:

becomes:

LABEL1:
if(x) { state = X; goto X; }
else
{
    ...
    if(y) { state = Y; goto Y; }
    else
    {
        ,,,
        { state = Z; goto Z; }
    }
}
LABEL2:

----------------------------------------------------------------------------
State-out

Surround the entire function with a switch statement on the state variable.
Generate a case for each label ending just before the next label. Insert a break
at the end of each case. Remove the gotos, leaving only the assignments to the
state variable. 

Invariant: context is released between each combable block

Note: we are taking advantage of the fact that SC_THREAD loops infinitely 

Example:

void f()
{
    LABEL1:
    ...
    { state = LABEL3; goto LABEL3; }
    LABEL2:
    if( x )
        { state = LABEL1; goto LABEL1; }
    else
    {
        ,,,
        { state = LABEL3; goto LABEL3; }
    }
    LABEL3:
    '''
    { state = LABEL2; goto LABEL2; }
}

becomes:

void f()
{
    switch( state )
    {
    case LABEL1:
        ...
        state = LABEL3;
        break;
    
    case LABEL2:
        if( x )
            state = LABEL1;
        else
        {  
            ,,,
            state = LABEL3;
        } 
        break;
    
    case LABEL3:
        '''
        state = LABEL2;
        break;
    }
    // When switch falls out we exit the function, but function is a SC_THREAD
    // and SC will just call it again in an infinite loop.
}

----------------------------------------------------------------------------
Extract waits

Replace all delay() calls with a single one at the bottom of the function. We
now have a minor delay for all the minor delays that were explicitly requested,
and also for each state transition. This is the step that establishes the states
as being spread out over time, in the manner of a computer.

Invariant: no non-trivial context across a delay()

Note: this is possible because all the delay() calls are at the ends of state
cases and there's now nothing after them until you get to the bottom of the
function.

Example output:

void f()
{
    switch( state )
    {
       ...blah blah, but we've removed all the delay() calls
    }
    delay();
}

----------------------------------------------------------------------------
Insert clock and reset

Move all objects to SC_CTHREAD. Replace the delay() at the bottom with 
wait(clk). @todo or whatever you do in an SC_CTHREAD to await a clock pulse.

This step is simply a clarification of the fact that we will generate a clocked
architecture, and not eg an asynchronous design. We are implementing the minor
delay as a period of time equal to 1/Fc. This step also implies the existence of
clock signal routing.

Invariant: no more delay() primitive - all events explicitly controlled 
by clock

@todo not sure about clock distribution or how to handle reset. Maybe reset 
should zero all stored data as a first step in startup. 

----------------------------------------------------------------------------
Remove local context

Move to SC_METHOD. Remove the wait(clk) primitive. This step is simply a result
of the fact that we are able to use SystemC's process model that invokes
functionality once per clock instead of on a continuous basis. The underlying
condition for this to be possible is that the only wait(clk) is in a trivial
position - just before returning. Since function return and delay are together,
the implication is that we do not need to keep any execution context across a
wait(clk). We can therefore release the context after each combable (=nominally
instantaneous) bit of work. Consequently, we don't need our own context any
more, we can just borrow some common shared context. 

The test rendering from this step will therefore not be multi-threaded.

Invariant: no persistent implicit context

Note: this is really a pattern reduction: SC_CTHREAD{ ...; wait(); } becomes
SC_METHOD{ ...; }. If any functions don't match the pattern we have an error.

----------------------------------------------------------------------------
Implement structs, unions and arrays

Recursively convert all data structures made up of structs, unions and 
arrays into SystemC bit vectors according to:

- structs become bit vectors of the total cumulative size, accesses to
members use the correct bit range and operations as whole operate on the
whole bit vector.

- unions become bit vectors of the length of the largest item, accesses to
members can use any legal bit range and operations as whole operate on the
whole bit vector.

- arrays become bit vectors of the element size times the number of elements.
Accesses as per structs.

In the case of nested structures, the bit range operators should be merged. 
Apply this step to registers within objects, and to ports and signals that
go between objects (inter-object calls with structs among the parameters
must be addressed).

Note: we must do all three in this step because we need to be able to 
support any nested combination.

todo: example code