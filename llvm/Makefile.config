#===-- Makefile.config - Local configuration for LLVM ------*- Makefile -*--===#
#
#                     The LLVM Compiler Infrastructure
#
# This file is distributed under the University of Illinois Open Source
# License. See LICENSE.TXT for details.
# 
#===------------------------------------------------------------------------===#
#
# This file is included by Makefile.common.  It defines paths and other
# values specific to a particular installation of LLVM.
#
#===------------------------------------------------------------------------===#

# Define LLVM specific info and directories based on the autoconf variables
LLVMPackageName   := llvm
LLVMVersion       := 2.5svn
LLVM_CONFIGTIME   := Mon Jul  6 20:57:30 BST 2020

###########################################################################
# Directory Configuration
#	This section of the Makefile determines what is where.  To be
#	specific, there are several locations that need to be defined:
#
#	o LLVM_SRC_ROOT  : The root directory of the LLVM source code.
#	o LLVM_OBJ_ROOT  : The root directory containing the built LLVM code.
#
#	o PROJ_SRC_DIR  : The directory containing the code to build.
#	o PROJ_SRC_ROOT : The root directory of the code to build.
#
#	o PROJ_OBJ_DIR  : The directory in which compiled code will be placed.
#	o PROJ_OBJ_ROOT : The root directory in which compiled code is placed.
#
###########################################################################

PWD := /bin/pwd
# Set the project name to LLVM if its not defined
ifndef PROJECT_NAME
PROJECT_NAME := $(LLVMPackageName)
endif

PROJ_OBJ_DIR  := $(shell $(PWD))
PROJ_OBJ_ROOT := $(shell cd $(PROJ_OBJ_DIR)/$(LEVEL); $(PWD))

ifeq ($(PROJECT_NAME),llvm)
LLVM_SRC_ROOT   := $(shell cd /home/jgraley/inferno-cpp2v/llvm; $(PWD))
LLVM_OBJ_ROOT   := $(shell cd /home/jgraley/inferno-cpp2v/llvm; $(PWD))
PROJ_SRC_ROOT   := $(shell cd $(LLVM_SRC_ROOT); $(PWD))
PROJ_SRC_DIR    := $(shell cd $(LLVM_SRC_ROOT)/$(patsubst $(PROJ_OBJ_ROOT)%,%,$(PROJ_OBJ_DIR)); $(PWD))
prefix          := /usr/local
PROJ_prefix     := $(prefix)
PROJ_VERSION    := $(LLVMVersion)
else
ifndef PROJ_SRC_ROOT
$(error Projects must define PROJ_SRC_ROOT)
endif
ifndef PROJ_OBJ_ROOT
$(error Projects must define PROJ_OBJ_ROOT)
endif
ifndef PROJ_INSTALL_ROOT
$(error Projects must define PROJ_INSTALL_ROOT)
endif
ifndef LLVM_SRC_ROOT
$(error Projects must define LLVM_SRC_ROOT)
endif
ifndef LLVM_OBJ_ROOT
$(error Projects must define LLVM_OBJ_ROOT)
endif
PROJ_SRC_DIR := $(shell cd $(PROJ_SRC_ROOT)/$(patsubst $(PROJ_OBJ_ROOT)%,%,$(PROJ_OBJ_DIR)); $(PWD))
prefix          := $(PROJ_INSTALL_ROOT)
PROJ_prefix     := $(prefix)
ifndef PROJ_VERSION
PROJ_VERSION := 1.0
endif
endif

LLVMMAKE := $(LLVM_SRC_ROOT)/make

PROJ_bindir     := $(DESTDIR)$(PROJ_prefix)/bin
PROJ_libdir     := $(DESTDIR)$(PROJ_prefix)/lib
PROJ_datadir    := $(DESTDIR)$(PROJ_prefix)/share
PROJ_docsdir    := $(DESTDIR)$(PROJ_prefix)/docs/llvm
PROJ_etcdir     := $(DESTDIR)$(PROJ_prefix)/etc/llvm
PROJ_includedir := $(DESTDIR)$(PROJ_prefix)/include
PROJ_infodir    := $(DESTDIR)$(PROJ_prefix)/info
PROJ_mandir     := $(DESTDIR)$(PROJ_prefix)/share/man

# Determine if we're on a unix type operating system
LLVM_ON_UNIX:=1
LLVM_ON_WIN32:=0

# Target operating system for which LLVM will be compiled.
OS=Linux

# Target hardware architecture
ARCH=x86_64

# Indicates, whether we're cross-compiling LLVM or not
LLVM_CROSS_COMPILING=0

# Executable file extension for build platform (mainly for
# tablegen call if we're cross-compiling).
BUILD_EXEEXT=

# Compilers for the build platflorm (mainly for tablegen
# call if we're cross-compiling).
BUILD_CC=
BUILD_CXX=

# Target triple (cpu-vendor-os) for which we should generate code
TARGET_TRIPLE=x86_64-unknown-linux-gnu

# Extra options to compile LLVM with
EXTRA_OPTIONS=

# Endian-ness of the target
ENDIAN=little

# Path to the C++ compiler to use.  This is an optional setting, which defaults
# to whatever your gmake defaults to.
CXX = g++

# Path to the CC binary, which use used by testcases for native builds.
CC := gcc

# Linker flags.
LDFLAGS+=

# Path to the library archiver program.
AR_PATH = ar

# Path to the nm program
NM_PATH = /usr/bin/nm -B

# The pathnames of the programs we require to build
BISON      := bison
CMP        := /usr/bin/cmp
CP         := /bin/cp
DATE       := /bin/date
FIND       := /usr/bin/find
FLEX       := flex
GREP       := /bin/grep
INSTALL    := /usr/bin/install -c
MKDIR      := $(LLVM_SRC_ROOT)/autoconf/mkinstalldirs
MV         := /bin/mv
RANLIB     := ranlib
RM         := /bin/rm
SED        := /bin/sed
TAR        := /bin/tar
YACC       := bison -y

# Paths to miscellaneous programs we hope are present but might not be
PERL       := /usr/bin/perl 
BZIP2      := /home/jgraley/anaconda3/bin/bzip2
DOT        := /usr/bin/dot
DOXYGEN    := /usr/bin/doxygen
GROFF      := /usr/bin/groff
GZIP       := /bin/gzip
OCAMLC     := 
OCAMLOPT   := 
OCAMLDEP   := 
OCAMLDOC   := 
GAS        := /usr/bin/as
POD2HTML   := /usr/bin/pod2html
POD2MAN    := /usr/bin/pod2man
RUNTEST    := /usr/bin/runtest
TCLSH      := /home/jgraley/anaconda3/bin/tclsh
ZIP        := /usr/bin/zip

HAVE_PERL    := 1
HAVE_PTHREAD := 1

LIBS       := -lpthread -ldl -lm 

# Targets that we should build
TARGETS_TO_BUILD=X86 Sparc PowerPC Alpha IA64 ARM Mips CellSPU PIC16 XCore CBackend MSIL CppBackend

# Path to location for LLVM C/C++ front-end. You can modify this if you
# want to override the value set by configure.
LLVMGCCDIR := 

# Determine the target for which LLVM should generate code.
ifeq (,3)
LLVMGCCARCH := x86_64-unknown-linux-gnu/3.4-llvm
else
LLVMGCCARCH := x86_64-unknown-linux-gnu/
endif

# Determine the path where the library executables are
LLVMGCCLIBEXEC := 

# Full pathnames of LLVM C/C++ front-end 'cc1' and 'cc1plus' binaries:
LLVMGCC  := 
LLVMGXX  := 
LLVMCC1  := 
LLVMCC1PLUS := 
LLVMGCC_VERSION := 
LLVMGCC_MAJVERS := 
LLVMGCC_LANGS := 

# Path to directory where object files should be stored during a build.
# Set OBJ_ROOT to "." if you do not want to use a separate place for
# object files.
OBJ_ROOT := .

# These are options that can either be enabled here, or can be enabled on the
# make command line (ie, make ENABLE_PROFILING=1):

# When ENABLE_OPTIMIZED is enabled, LLVM code is optimized and output is put
# into the "Release" directories. Otherwise, LLVM code is not optimized and 
# output is put in the "Debug" directories.
#ENABLE_OPTIMIZED = 1


# When DISABLE_ASSERTIONS is enabled, builds of all of the LLVM code will 
# exclude assertion checks, otherwise they are included.
#DISABLE_ASSERTIONS = 1


# When ENABLE_EXPENSIVE_CHECKS is enabled, builds of all of the LLVM
# code will include expensive checks, otherwise they are excluded.
#ENABLE_EXPENSIVE_CHECKS = 0


# When DEBUG_RUNTIME is enabled, the runtime libraries will retain debug
# symbols.
#DEBUG_RUNTIME = 1


# When ENABLE_PROFILING is enabled, the llvm source base is built with profile
# information to allow gprof to be used to get execution frequencies.
#ENABLE_PROFILING = 1

# When ENABLE_DOXYGEN is enabled, the doxygen documentation will be built
ENABLE_DOXYGEN = 0

# Do we want to enable threads?
ENABLE_THREADS := 1

# Do we want to build with position independent code?
ENABLE_PIC := 0

# Use -fvisibility-inlines-hidden?
ENABLE_VISIBILITY_INLINES_HIDDEN := 1

# This option tells the Makefiles to produce verbose output.
# It essentially prints the commands that make is executing
#VERBOSE = 1

# Enable JIT for this platform
TARGET_HAS_JIT = 1

# Shared library extension for host platform.
SHLIBEXT = .so

# Executable file extension for host platform.
EXEEXT = 

# Things we just assume are "there"
ECHO := echo

# Get the options for causing archives to link all their content instead of
# just missing symbols, and the inverse of that. This is used for certain LLVM
# tools that permit loadable modules. It ensures that the LLVM symbols will be
# available to those loadable modules.
LINKALL := -Wl,--whole-archive
NOLINKALL := -Wl,--no-whole-archive

# Get the value of HUGE_VAL_SANITY which will be either "yes" or "no" depending
# on the check.
HUGE_VAL_SANITY = yes

# Bindings that we should build
BINDINGS_TO_BUILD := 
ALL_BINDINGS      := ocaml
OCAML_LIBDIR      := 

# When compiling under Mingw/Cygwin, executables such as tblgen
# expect Windows paths, whereas the build system uses Unix paths.
# The function SYSPATH transforms Unix paths into Windows paths.
ifneq (,$(findstring -mno-cygwin, $(CXX)))
  SYSPATH = $(shell echo $(1) | cygpath -m -f -)
else
  SYSPATH = $(1)
endif
