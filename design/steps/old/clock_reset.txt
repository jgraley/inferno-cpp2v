
Clock and Reset support
=======================

Clock and reset signals are implemented as follows:

All modules include a clock and reset input port at the start of their param list, named "clock" and "reset". All other port names should be uniquified so there's no risk of a name clash. Clock and reset passed to all sub-module instances. All clocked always blocks use clock for clocking and support reset. Reset clears all registers to zero. Clock is rising-edge and reset is synchronous.

It is difficult to use the constructor's initialiser list because some entries may require expressions and function calls and later members may depend on earlier ones. Therefore the constructor must be viewed as a function rather than a side-effect of reset. Reset is therefore principally for power-up and test purposes, and zeroing all registers simply ensures predictable and repeatable behaviour. 
   
An example clocked always block appears as follows:

always @(posedge clock)
begin
    if( reset )
    begin
        x <= 0;
	  ...
    end
    else
    begin
        x <= ...
	  ...
    end
end    	

Such code will be inserted into modules and clocked always blocks as a post-processing step in order to simplify the main mapping steps. Always blocks that should be remapped in this manner are represented as a special token "always_clocked".

