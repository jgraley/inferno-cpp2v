(C) Copyright 2006 John Graley
Available under the terms of the BSD license. 

Protocol phase - steps relating to communication between objects

Functrinos going between objects are still unacceptable for state-out.
TODO why? We
therefore need to go quite low-level in this phase in terms of describing a
protocol that makes the program structure look like the ends of some
well-defined wires from the perspective of an object. 

We begin by introducing the Transaction Level Modelling concept of a channel for
each functrino. Over a few steps, the channels are modified to avoid making
calls into objects (instead they use SystemC's channel->module wakeup scheme)
and split up into finer, more role-specific channels.

We add an acknowledgement for each functrino. This is to be understood as a
low-level ack that serves protocol functions: flow control and data validity
marshaling. The reader may object that we have divided function calls twice
now: first into call-functrino/return-functrino, then into 
call-request/call-ack/return-request/return-ack. But this is no different to
ARM's AXI bus spec, that has avalid/aready/rvalid/rready for a read transaction.

Finally, we actually insert SystemC's version of wires, the sc_signal<x>
pre-defined channel. In the interests of proper correctness, we also choose now
to add a notional time delay, called a "minor delay" in order to prevent objects
from trying to do impossible things like toggling a wire twice simultaneously.

The steps within this phase follow:

----------------------------------------------------------------------------
Add channels

Create a new "channel" (in the SystemC TLM sense) for each sub-transaction. The
channel should forward the functrino calls. The idea is that we turn functrinos
into channels and then progressively modify the channels' implementation towards
being like wires.

Invariant: we have a presence, in the form of a channel, between communicating 
pairs of objects.

Note: the channel implementation we create will not be stated out but instead
will be converted to wires (=signals) by the protocol step(s). It will mostly 
be boiler-plate code.

Note: changes caller and callee but trivially. Code in objects doesn't really 
change - just calls functrinos through the channel implementation instead of 
directly.

Example test render (channel for functrino k(char c)):

// Note: the channel implementation is just for test rendering; it doesn't 
// get fed into later stages.
class Channel_k : public sc_interface
{
    void do_functrino( char c )
    {
        dest.k( c );
    }    
};

----------------------------------------------------------------------------
Passivate

Modify the channels. Provide each with passive (call-in) 2-phase interfaces for
both caller and callee. All functrinos go into the channel and the channel kicks
(wakes up) the callee using an event and the callee then collects the fuctrino
parameters from the channel. 

The passive call model is an essential step since the function call model
produced in the sequential phase (state-out) will only be able to handle
function calls within objects. In this phase, therefore, we must eliminate calls
between objects completely. This phase removes calls that go into objects,
and calls coming out of objects will be broken down into primatives that
correspond to driving or polling inter-object wires.

Invariant: objects do not receive incoming functrinos

Note: after this step, a functrino is still used to initiate a sub-transaction,
but the recipient gets an event and does a "get data" type call on the channel
to get the data. We therefore rely on SystemC to convey events into objects.

Note: the call into the channel to get the params is not a functrino since 
it goes to a communications primitive (the channel) and not an object.

Note: the event mechanism should be counted, so that 2 events cause 2 wakes.
This eliminates the risk of dropped events due to racing.

Note: only change functrino recipients

Example test render (channel for functrino k(char c)):

// Note: the channel implementation is just for test rendering; it doesn't 
// get fed into later stages.
class Channel_k : public sc_interface
{
    char param_c;
    
    void do_functrino( char c )
    {
        param_c = c;
        @todo event the connected destination port
    }
    
    void get_data( char &c )
    {
        return c;
    }
};

do_functrino() replaces f_data() (for call-functrinos) or f_return() (for
return-functrinos). 

----------------------------------------------------------------------------
Make functrinos rendez-vous

For each channel, add an "ack" channel which goes the in the other direction
and has no data (same passive model). The recipient should ack immediately after
receiving the event and the originator should wait for the ack.

The ack serves two purposes: (1) marshaling of interactions to ensure that
events are not sent too rapidly for the recipient to handle them and (2) to
ensure that there is a well defined period of time for the recipient to read the
accompanying data.

This model is a rendez-vous model. The rendez-vous takes place for a finite
period of time beginning at receipt of the request and ending when the ack is
sent. A single request-ack cycle is a sub-transaction and the accompanying data
is valid for the recipient during this period.

It is expected that the request-ack period should be much shorter than the
call-return delay in a real system.

Invariant: now all transactions rendez-vous meaning the data doesn't have to 
be stored externally between origination and receipt.

Note: Now there are 4 events: call, call ack, return, return ack. Call ack 
and return events could be merged but we will regard that as an optional future
optimisation.

Note: transactions now 4-phase; sub-transactions now 2-phase

Note: arrange for the "ack" to clear the stored data, or mark it as
unavailable for testing, to ensure we only consult the data when it is actually
available. Also ensure another request is not sent before the ack from the
previous one.

Example test render (channel for functrino k(char c)):

// Note: this is all just for test rendering; it doesn't get fed into later
// stages.
class Request_k : public sc_interface
{
    char param_c;
    
    void do_request( char c )
    {
        param_c = c;
        @todo event the connected destination port
    }
    
    void get_data( char &c )
    {
        return c;
    }
};

channel Ack_k : public sc_interface
{
    void do_ack()
    {
        event the source port
    }
};

Sender code goes:
    ...
    request_k.do_request('a');
    wait( ack_k );
    ...
    
Recipient event handler code goes:
    case K:
        c = request_k.get_data();
        ack_k.do_ack(); // Ack immediately
        ...do whatever is implied by functrino k...

----------------------------------------------------------------------------
Split out data and event channels

The outgoing request channels should be split into 2 channels: an event-only
channel to signal the event and data-only channels for the data. This step
simply makes the channel structure look more similar to what will be achieved
using wires. In particular we go from having request channels and ack channels
to having event channels and data channels.

Invariant: can now treat event channels and data channels separately

Note: the ack channel is already an event-only channel

Note: if >1 param, create multiple separate data channels one for each param.

Example test render (channel for functrino k(char c)):

// Note: this is all just for test rendering; it doesn't get fed into later
// stages.
class Data_k : public sc_interface
{
    char param_c;
    
    void set_data( char c )
    {
        param_c = c;
    }
    
    void get_data( char &c )
    {
        return c;
    }
};

class Request_k : public sc_interface
{    
    void do_request()
    {     
        @todo event the connected destination port
    }
};

Sender code goes:
    ...
    data_k.SetData('a');
    request_k.do_request();
    wait( ack_k );
    ...
    
Recipient event handler code goes:
    case K:
        c = data_k.get_data();
        ack_k.do_ack(); // Ack immediately
        ...do whatever is implied by functrino k...

----------------------------------------------------------------------------
Introduce minor delay

Introduce a primitive called delay() which generates an event to the current
thread then waits for it. This is called a minor delay.

At present, we do not actually use these anywhere; the significance of this step
is that we have added our first sequential/timing construct apart from the
natural execution sequence of software. We have to do this in the structural
phase because the wire-based protocol cannot be correctly described without it.

Invariant: can now express minor delays

Note: when we add protocols, we need to be able to avoid combinational loops
so we use this primitive to break them. 

todo: get rid of this step because it doesn't actually do anythin, but preserve 
the description of minor delays.

Example test render for delay():

delay()
{
    @todo event current thread
    wait( delay_event );
}

----------------------------------------------------------------------------
Move to signals

The event-only channels become sc_signal<bool> backed by a member variable. 
An event is generated by toggling the value: 1 goes to 0; 0 goes to 1. Reset 
value is 0. The data-only channels become sc_signal<x> where x is the data 
type used. Multiple data items (eg multiple parameters) should be merged into
a single struct. Add a single delay() to the originator algorithm just after 
the transaction. 

Invariant: All communication is via sc_signal

Note: No need for backing members on data channels because the algorithm will
block during the transaction so the supplied data can't change. 

Note: since we are now dealing with wires (which is what signals really are),
we need to avoid combinational loops (which are viewed as part of the behaviour
of wires). We do this by adding a minor delay so that no two transactions
can occur simultaneously (though the ack can be simultaneous).

The protocol allows ack to be derived combinationally from the request
line, i.e. with no delay. A delay is required after the transaction, so that
the next transaction does not occur simulataniously. In an earlier design,
the delay was required to be between request and ack but this prevents us 
from implementing guaranteed instant ack by simply connecting ack line to
request line (which then allows synth tools to remove the ack wire and
maybe also the request wire). For clarification, if both request and ack 
toggle in the same clock cycle, then they correspond to the same transaction
and the data lines are valid for that transaction at the time of the toggle.

Note: we use toggling for our pulse model because: (a) using logic 1 for a
pulse requires that we measure clock cycles as with AXI protocol ready and
valid lines and (b) doing a complete 0-1-0 pulse would require 2 minor 
delays which is >= 2 clock cycles.

Example for a functrino k(char, int):

Channels Data_k, Request_k and Ack_k are replaced by
struct data_k_type { char p1; int p2; };
sc_signal<data_k_type> data_k;
sc_signal<bool> request_k, ack_k;

Sender code goes:
    ...
    data_k.p1 = 'a';
    data_k.p2 = 42;
    request_k = !request_k;
    wait( ack_k );
    delay();
    ...

Recipient event handler code goes:

    case K:
        c = data_k.c;
        i = data_k.i
        ack_k = !ack_k; 
        ...do whatever is implied by functrino k...

Wait function implemented thus:

wait( sc_signal<bool> s )
{
    bool os = s;
    while(os == s) 
    {
    }
}
