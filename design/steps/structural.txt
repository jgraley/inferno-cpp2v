(C) Copyright 2006 John Graley
Available under the terms of the BSD license. 

Structural phase - steps relating to program structure (inter-object level)

In this phase, we deliver on the promise made in the philosophy document: that
we would avoid simply re-creating a single computer (by doing state-out and
similar on the whole input program at once) and instead regard the program as a
network of semi-autonomous interacting agents.

These agents will each be stated-out separately. Each one is capable
of implementing whatever code we partition into it as well as any code we choose
to add. Any code we add must confirm to the subset of C++ established in earlier
phases. We partition at object level. 

We choose to replace function calls between objects with pairs of
function-call-like things called functrinos. A functrino has a call event and
parameters but no return or return value. There's a functrino for a function
call and another for its return. Functrinos could probably be used to model
other things like messages, and some "void" functions with the right properties
could be modelled with only a call-functrino, but that's for the future. The
real advantage is that we've get rid of some inconvenient aspects of functions.

We will choose to pass functrinos through a number of "thunks" or forwarding
functrinos that simply call through to another functrino. This is done to
establish the paths that will be taken by what will eventually become wires. We
need to be able to tell Verilog where they go, and we need to marshall them and
avoid blatant duplication. These steps actually give rise to arbiters (and
possibly routers) as structures that emerge from thunks as the later structural
and sequential steps execute. This is a nice result.

Each object, after state-out, will possess its own context of execution in the
form of a physically manifest state variable. In this phase, we choose to model
them using SystemC's SC_THREAD primitive, which is really just a wrapper for an
OS thread. It helps us run tests on intermediates and is also a conceptual aid
since we can "re-use" understanding of multi-threaded programming, admittedly in
SystemC's esoteric style (but remember SystemC is designed to be mappable to
hardware). We ensure that functrino interactions between threads are
non-blocking, so that each functrino may be considered as an instantaneous
event (at least for now). 

The steps within this phase follow:

----------------------------------------------------------------------------
Add SystemC modules

Each class should derive from sc_module, thereby making it a SystemC
module. Add an empty SC_CTOR to each module definition. 

Note: Do not change structs - these will not become modules

Note: We regard SC_CTOR and its contents as a SystemC construct for
expressing static binding, processes and sensitivity lists. SC_CTOR
has no relationship to the constructors that were present in the 
original input program.

Note: do not use SC_MODULE macro - it cannot be extended for 
interfaces etc

Invariant: SystemC features now available.

Example:

class C
{
    ...
};

becomes:

class C : public sc_module
{
    SC_CTOR(C) // SC_CTOR really means SC_ELABORATION_STUFF
    { // nothing here yet
    }
    ...
};

----------------------------------------------------------------------------
Make static calls though ports

For each call to a function in another object that is *not* routed using
a pointer (eg a.b.foo() but not p->foo()), add a SystemC port to the 
calling module definition, bind the port in the SC_CTOR() and then make
the calls though the port.

Note: all static calls to go through ports, including calls to member modules
even though SystemC conventions dont require this.

Invariant: all static calls statically bound through ports.

Example:

class C : public sc_module
{
    SC_CTOR(C) 
    { 
    }
    void f()
    {
        d.g(); // d is an instance of some other module with function g()
    }
};

becomes:

class C : public sc_module
{
    sc_port<D> portd; // D is the module definition of d
    SC_CTOR(C) 
    { 
        portd(d); // bind statically
    }
    void f()
    {
        portd.g(); // call through the port
    }
};

----------------------------------------------------------------------------
Move to 2-phase transactions

Turn function calls between module instances into "fake" nonblocking by adding 
a new call back to the original caller after processing is complete, just before 
the original called function returns. The original call is now called a
call-functrino, and the new call is called a return-functrino.

Replace each interface that is bound to ports in other module instances with two 
functrino interfaces: a call-interface and a return-interface. The call-interface 
should be the same as the original interface except names should be prefixed with 
"call_" and the return types should be void. The return-interface prefixes function 
names with "return_", has a single parameter of the original function's return type, 
and returns void.

Call-interfaces should replace the original interfaces and ports should be bound
to the call interface. Every module that binds a port to a call-interface (either
statically or dynamically due to pointers steps) should implement the corresponding 
return interface.

The original functions should be prefixed with "impl_" and should have no parameters
or return value. The original interface should be removed and the impl functions
should be made private.

Call-functrinos should store the parameters and the dynamic id of the caller 
in new member variables and then call the corresponding impl function. Before each 
return statement, the impl function implementation should invoke the corresponding 
return-functrino through a new unbound port using the supplied id for dynamic 
binding. The return value should be passed to the return functrino and the actual 
return statement should return void (no return value).

Return-functrinos should store the return value in a member variable so that it
may be read by the original calling code.

The idea here is to establish that the return event and return value come via a
second call. Now, each of these calls has no return value and the only important
event is their calls, not their returns. These are the characteristics of
functrinos.

Invariant: only functrinos between objects.

Note: initial call is a functrino as far as the caller is concerned but isn't 
implemented as one by callee. Hence "fake" 2-phase.

Note: Functions that return void may be implemented in a single phase (no return-
functrino) in two ways:
1. Do the work inside the functrino. Basically, we label the function as a 
call-functrino.
2. Let the call-functrino start the function running and return immediately, and 
don't bother with the return-functrino
Both of these have issues: 1. will prevent the calling state machine from executing
concurrently; 2. will have issues if the function has side-effects. 
I suggest always putting both in to start with. If a calling function ignores the
return-functrino, synth tools may optimise out the wires anyway.

Example output:

class return_G : public sc_interface
{
    virtual void return_g( int retval )=0;
}

class call_G : public sc_dyn_interface<return_G>
{
    virtual void call_g( char x )=0; // was virtual int g( char x )=0 in the original interface  
};

class A : public return_G
{
    int stored_retval;
    char stored_x;
    sc_dyn_id< return_G > stored_return_id;
    sc_port<call_G> portb;

    SC_CTOR
    {
        portg(b); // statically bound
    }

    void f()
    {
        ...
        portb.g_call();
        y = stored_retval; // gets the return value from function g()
        ...
    }

public:    
    void return_g( int retval ) // return-functrino
    {
        stored_retval = retval;
    }    
} a;

class B : public call_G // used to inherit from the original G interface
{
    sc_port<return_G> return_port; // new port, dynamically bound

    void impl_g() 
    {
        ... g()'s algorithm ...
        int retval = stored_x*22; // or whatever
        return_port(stored_return_id).return_g(retval);
    }    

public:    
    void call_g( char x ) // call-functrino
    {
        stored_x = x;
        stored_return_id = sc_get_incoming_id();
        impl_g();
    }    
     
    // g used to be 
    // int g() { return x; }
} b;


----------------------------------------------------------------------------
Class boundary forwarding

Introduce thunk functrinos such that any functrino call from a member object to
an external object or vice-versa is forwarded through a new thunk functrino
within the object. The new thunk functrino should be a member of the aforementioned
object.

Verilog modules require that all interaction between "stuff" inside and "stuff"
outside the module is explicitly manifested by wires. This step helps to make
all interactions visible at the required level(s) of the hierarchy.

This step requires a recursive pass over all classes since arbitrarily nested 
member classes need to forward their functrino calls through all enclosing layers.

All classes with no non-trivial members objects should be marked as "forwarded" 
(they do not require this step). Iteratively, any class whose non-trivial members
are all marked as "forwarded" may be modified for forwarding. This iteration will 
terminate once all classes are modified.

The modification is to (a) duplicate all public member functrinos of all member
objects in the enclosing class's interface and (b) duplicate all external functrinos
that are called from member object's member functions. Duplicated functrionos 
should be implemented simply to forward the call. 

Note: We could just use a primitive in the internal representation for this, that
doesn't render to anything in test builds, but the functions we generate will
turn into Arbiters as later steps are applied to them, and will give us the
associated streamlining and reduction of wiring complexity.

Note: since all member functions will be merged into a single state machine,
this means that such functrinos will be sequentialised against all other
similar external/member functrinos as well as the implementations of the 
object's own functions. This limitation may be mitagated by choice of 
class hierarchy in the input program.

Note: we should be forwarding calls between two seperate member obejcts 
of the same class through the enclosing object.

Invariant: calls into or out of an object are forwarded hence visible at 
the object's class definition.

Example output:

class A
{
public:
    void p( int ); // functrino
};

class B
{
private: // used to be public
    A subobject;
    
public:         
    // Thunk functrino just forwards the call
    void subobject_p( int x )
    {
        subobject->p( x );
    }
};

----------------------------------------------------------------------------
1:1 caller-callee relationship

Whenever a functrino pd is called by more than one external object, add 
new functrinos p1, p2, ... within pd's object, one for each calling object. 
These objects should now call the p1, p2 etc which should forward to pd.

We need a 1:1 caller-callee match in order to be able to bind ports and
introduce channels. This step was originally much higher up because it was
thought a prerequisite for pointers and 2-phase. However, those steps are no
harder without, so we now do this as late as channel construction will allow.

Since there is only one state machine in each object, a given object can only 
count as a single caller to a function F even if the code in the object
has multiple call points.

The forwarding has already ensured that external calls can only come from
the enclosing object. So only one call can come from outside the present
object. However, member objects may make calls too. So the original functrino
interface should be preserved for calls from the outside, and duplicates
should be created for as many member objects contain the code to call the
functrino interface.

This will result in router/arbiter functionality in each object affected.

Invariant: Inter-object calls should now be 1:1 caller-callee correspondence.

todo: IMPORTANT 
this step seems to require looking into member object code to spot 
outgoing calls, or to duplicate *every* callable member function for every
member object just in case it makes a call. Neither is very desirable so it 
may be better to add a "designate outgoing calls" step that moves outgoing
call knowledge from implementation to interface. Forwarding and functrino 
generation might benefit from this too. 

@todo do I need to collect together all the outgoing calls eg in object Y 
in the example output?

Example output:

class Y // use p1 for all outgoing calls from this object
{
    void q()
    {
        x.p1();
        x.p1();
    }
    
    void r()
    {
        x.p1();
    }
}

class Z // use p2 since now in a different object
{
    void i()
    {
        x.p2();
    }
}

class X // this class used to just have pd() but has now had the 1:1 step done on it.
{
private:    
    Y y;
    Z z;
    void pd()
    {
        ...blah...
    }
    
    
public:
    void p1() // new functrino
    {
        pd();
    }
    
    void p2() // new functrino
    {
        pd();
    }
} x;

----------------------------------------------------------------------------
Add local context

Each incoming functrino p() should generate an event (after storing its parameters) 
that wakes the SC_THREAD which should be running an upper executive function. 
The upper executive should invoke an implementation function eg p_impl(); An 
enum should be created to differentiate between multiple functrinos.

The idea is to introduce a context (in the form of a SC_THREAD) for each object
and ensure that it is used to execute all existing functrinos within that
object. We have to use events to signal the threads, but we keep the external 
interface of the servers the same. This step does the same thing to all functrinos
regardless.

Invariant: A given object's code is executed within a context that belongs to
it.

Note: at this stage, all events are internal to objects, and do not go between
servers.

Note: Possible major problem here supporting inter-object recursion between this
step and the "make transactions non-blocking" step. Since each object's local
context "camps" in the other object's function while awaiting completion of the
call it is not straightforward for it to resume checking for incoming calls
while waiting. Solution is to employ a pool of contexts for each object and use
a "wake one waiter" event mechanism to ensure we select one waiting context for
each incoming call. Hopefully SystemC supports this @todo check!

Note: maybe use a clean internal format for remembering what's a SC_THREAD etc
and what its sensitivities are, and only generate the SC_CTOR when rendering for
test.

@todo maybe extract a step that splits p() into a trivial p() and a p_impl() and
add the executive in a separate step above this one, lashed up so that p()
invokes the executive directly. That might simplify the changes that are loaded
onto adding contexts (which seem rather heavy atm).

Example output:

SC_MODULE(A)
{
    enum { P, Q } which;
    sc_event X_wake, p_wake, q_wake;

    void X_executive() // upper executive
    {
        while(1)
        {
            wait( X_wake );
            switch( which )
            {
                case P:
                    p_impl();
                    @todo event p_wake             
                    break;
                    
                case Q:
                    q_impl();
                    @todo event q_wake
                    break;
            }            
        }
    }

    SC_CTOR(A)
    {
        SC_THREAD(X_context)
        sensitive << X_wake;
    }
    
    server X
    {
    public:
        void p()
        { 
            which = P;
            @todo event X_wake;
            wait( p_wake );
        }

        void q()
        {
            which = Q;
            @todo event X_wake;
            wait( q_wake );
        }

    private:
        void p_impl()
        {
            ...code taken from original p()...
        }

        void q_impl()
        {
            ...code taken from original g()...
        }
    }
};


----------------------------------------------------------------------------
Make transactions non-blocking

Functrinos should return immediately after kicking the object context.

By allowing the functrinos to return immediately, we are allowing the
execution paths of caller and callee to proceed independently, at least to an
extent. This will be an important step when parallelism becomes important. It
may also be viewed as a natural consequence of having done both "fake 2-phase"
and "add local context" and then cleaning up the resulting code.

The wait_return() primitive must now be implemented properly, since the
call-functrino returns immediately and can no longer be used to discover when
the function call has completed. wait_return() should be implemented as a
recursion into the object's upper executive function. The signal_return()
function should set a flag that causes the upper executive to return (exactly
once). 

All data used in the now-recursive executive must be explicitly stacked with a 
new stack pointer. All new data must be raw integral member data. This is because 
local variables and the stacks that support them have already been lowered out 
in the data phase.

Invariant: all functrinos return immediately

Note: only change callee (upper executive)

Note: Now reduce to one context per object. Wait for outgoing calls to return by
recursing back into the context's upper executive code. This supports recursive
calls.

Note: at this stage, each functrino corresponds to a sub-transaction.

@todo example confusing because there are 2 distinct pairs of
wait_return()/signal_return() in the 2 modules.

@todo split out the wait_return()/signal_return() implementation via recursing
the upper executive into a separate step above this one. Yes, and the explicit 
stack creation.

Example output:

SC_MODULE(A)
{
    event q_done_event; 
    int q_retval;

    void p()
    {
        ...
        b.q_call();
        wait_return( q_done_event ); 
        y = q_retval;
        ...
    }

public:    
    void q_return( int retval ) // functrino
    {
        q_retval = retval;
        signal_return( q_done_event ); 
    }    
} a;

SC_MODULE(B)
{
    enum { Q } which;
    sc_event X_wake;
    bool got_return;
    
    void wait_return() { X_executive(); }
    void signal_return() { got_return=true; }

    void X_executive()
    {
        while(!got_return)
        {
            wait( X_wake );
            switch( which )
            {
                case Q:
                    q_impl();
                    a.q_return()      
                    break;
            }            
        }
        got_return=false;
    }

    SC_CTOR(B)
    {
        SC_THREAD(X_context)
        sensitive << X_wake;
    }
    
    void q_call()
    { 
        which = Q;
        @todo event X_wake;
    }

    void q_impl()
    {
       ...code taken from original q()...
    }
};


