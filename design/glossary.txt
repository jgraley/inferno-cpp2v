Glossary
--------

Mainly concentrates on words whose meaning is modified or new for this project.
We also use words from programming theory, electronics, C, C++, SystemC, TLM and
Verilog. Try searching on the word to see how it is used in other definitions.

-----

Ack, acknowledgement - an event that is sent via a backchannel in response to
another event. This can be for managing protocol event lines or to aid in the
transfer of associated data.

Active - a way of receiving an event and data via an explicit function or
functrino call, as is typically found in functional languages and C/C++. See
Passive.

Assert - a check placed in code to check that some factor is true. We do not
propose to use asserts for the step invariants as defined here - instead they
are generated to enforce consistency when we introduce redundancy (not often).

Back-channel - A channel (in its broader sense) that joins the same pair of
subsystems as an existing channel but which passes events and data in the
opposite direction. Used for various reasons. See channel.

Call-functrino - a functrino in a 2-phase style that signifies the invocation
of a function and conveys parameter data. See functrino and return-functrino.
@todo deprecate: may be confusing when we go to four functrinos per transaction.

Channel - a persistent communication primitive between two subsystems that
permits events and data to be propagated. We use the word in the SystemC TLM
sense, which is a specialisation of the above definition.

Combinational logic - a kind of system built in electronic logic that contains
no storage elements. Outputs are derived from inputs via gates. Though the
output typically becomes correct after some finite delay, it cannot be
considered sequential since there is no defined sequence of steps. It is instead
a concurrent system with latency. 

Comb-out - The process of converting a sequential algorithm into combinational
logic. Note that the process can be wasteful and certain corner cases would
require an unboundedly large implementation: the term combable refers to code
that can be combed-out without these problems. See combinational logic.

Context - the working data required for a computer to execute code. This
includes program counter, stack and possibly other data. Where multiple contexts
are present it is possible to switch between them explicitly. Contexts resemble
threads without preemption and may be implemented easily using threads.
Coroutines and cooperative multitasking are other terms for contexts.

Delay - a primitive concept that we add to SystemC referring to the passage of
time within a sequential context. Delays are divided into minor and major
delays: see the corresponding entries.

Deref function - dereferencing function - a function that implements a
combination of address taking and some member function call on the resulting
object. These are combined on the basis of taking the action to the object, not
the object to the action.

Event - a primitive concept of a link in the cause-and-effect chain within a
system. Usually, it is one part of the system waking some other part and the
process is nominally instantaneous. Events do not include data.

Executive - extra code added to servers to allow them to participate in the
structural style. The term is taken from simple operating systems, but the
executives we create will be too simple for the operating system moniker.
Divided into upper and lower halves, see upper executive and lower executive.

Fake nonblocking - a style with the semantics of nonblocking but where the 
call-functrino actually blocks.

Forwarding - a forwarding function f simply invokes another function g with the
same parameter values and returns g's return value. They add nothing to the
program in that form, but may become something useful when subjected to later
transformation steps.

Functrino - a function call generated in intermediate styles which corresponds
to a single phase within a transaction. Since that transaction itself probably
represents a function call in the original program, we choose to use a different
word. Functions map to functrinos on a 1:N basis where N is 2 or 4 at different
steps.

Heap - an area of memory used for dynamic allocation via malloc() and new().

Iff - lit. if and only if

Invariant - a property of a style or representation of a program that may be
introduced by a transformation step and may be required by other steps.
Invariants will usually be the absence of types of constructs or guarantees
about behaviour/properties of parts of the system. Occasionally they may be
expression of redundancy (duplication of information in the program though
guaranteed equivalences) though this is discouraged.

Inversion - a method of modifying a programming language's semantics using
features provided by the language itself. This may be to change language rules,
add instrumentation or make the compiled object self-interpreting, for example.
C++ features like templates and operator overloading assist with this to a
limited extent. SystemC is partly inversion and partly explicit library. We 
choose explicit program transformation instead because inversion (in C++) is 
limited in expressivity plus gets very confusing very quickly.

Local - a data item whose lifetime is tied to a scope block. Usually allocated
from stack memory. 

Lower - a term from compiler design which refers to removing a construct and
re-implementing the same functionality using lower level constructs.

Lower executive - additional code that we add around outgoing function calls 
from servers in order to support the structural style. See upper executive.

Memberise - to convert something into a class member.

Message - a combination of an event and some data. Deprecated term - too vague!

Minor delay - a delay that is long enough to allow combinational logic to settle
but of the order of a single step within a sequential algorithm. Minor delays
may be created to order to separate protocol events. See delay.

Major delay - a delay corresponding to multiple steps within a sequential
algorithm.

Params, parameters - the data associated with a function call event.

Passive, passivate - a way of receiving incoming events and data by making only
outgoing calls to wait for the event and collect the data without needing to 
receive an incoming function or functrino call. Passivation is the process of
converting an active model to passive. See Active.

Phase - the top level of granularity of the translation process. Each phase
contains a number of steps which together address a broad part of the
trnaslation required. They do not overlap - all steps in one phase are completed
before any in the next phase. This ensures a single intermediate style between a
neighbouring pair of phases.

Pointer - we use the term pointer in the C/C++ sense.

Poll, poll loop - polling refers to checking the state of a signal to detect a
change that implies that an event has occurred. A poll loop refers to a
sequential construction that polls repeatedly with some delay in between polls.
Polling may be considered as inferring events from data.

Port - the SystemC primitive (sc_port<>) for connecting a module to a channel or
another module. We will use ports for inter-server connections too. A port
resembles a pointer with additional event semantics.

Phase, N-phase - an N-phase transaction completes after N specific events have
occurred, possibly with time delays between them.

Plain scope - a scope not under the control of a construct such as while, if or
try/catch. A plain scope is only useful for its ability to control
construction/destruction of locals and goto behaviour.

POD - Plain Old Data - data consisting of fundamental types, pointers and arrays
of fundamental types but not instances of objects.

Primitive - a language element we add for intermediate styles that does not 
get subsumed into later steps as program functionality but instead retains a
distinct behaviour throughout which has to be handled specifically by later
steps. An implementation for testing should always be offered.

Protocol - a detailed description of a way of conveying events and data using
signals. Protocols allow us to convert SystemC TLM transactions into low-level
SystemC.

Pseudo-latch - a Verilog construction based on a flip-flop and a multiplexer
that emulated the behaviour of a latch in a synchronous environment.

Queue, N-queue - classification of event propagation mechanisms via analogy to
FIFO queues. A 0-queue event resembles a FIFO of length 0 because it cannot
store the event and so blocks both waker and wakee forcing a rendez-vous. A
1-queue event permits waker to return immediately if empty and wakee to return
immediately if full.

Recursion - when a function makes a call to itself, or to another function that
ultimately results in another call to the original function. Recursion takes
place inside a single context, and requires that the context platform is
implemented appropriately.

Referee server - a server that passes a pointer (via parameter or return value)
to another server and is therefore relied on by the other server to implement
deref functions against the supplied pointer. See server.

Rendering - converting the internal representation (at any stage) into valid
code which may be C++, SystemC or Verilog. Rendering is used to generate test
programs for intermediate stages as well as the final Verilog output.

Return-functrino - a functrino in a 2-phase style that signifies the completion
of a function and conveys return value data. See functrino and call-functrino. 
@todo deprecate: may be confusing when we go to four functrinos per transaction.

Scope - a function or section of a function delimited by braces {} in C/C++ or
various mechanisms including begin/end in Verilog. Scopes must end in the
opposite order they began which permits local variables to be allocated on a
stack as well as supporting structured programming.  

Sequential - in reference to an algorithm, sequential implies that the algorithm
may be broken up into a sequence of operations performed one after the other
over time. Outputs from earlier operations are stored and then provided as
inputs to later operations.

Server - a group of one or more member functions and POD data members from
within a single object. Every member function and POD member datum must belong
to a server. Therefore servers form a hierarchical layer between objects and
functions/data. The server level is the boundary between sequential and
structural mapping approaches.

Signal - a simple model of an electrical wire. We use the SystemC sc_signal<>
for this.

Smearing - A possible weakness in a design whereby some of the functionality 
of one step is duplicated in another. For example if step A converts all simple 
x into complicated y, and a later step B creates new y, then B duplicates some
of A's complexity-generating functionality. Better to do B first and have it
generate x which A will then turn into y in due course. 

Stack - a stack is FILO (First-In-Last-Out) data structure which may be used to
hold working data for a function call mechanism as well as the local variables
in an efficient manner.

State - a particular value of the state variable in a state machine; description
of a state machine whose state variable holds a certain value. A state is held
for a period of time. It is entered and left via state transitions at different
times. See State machine.

State machine - a way of implementing sequential behaviour on top of concurrent
behaviour by explicitly maintaining a state variable and selecting behaviour
based on its value. Behaviour includes mapping of inputs to outputs and
transitions to new state values based on events.

State-out - to convert an explicitly sequential algorithm into a state machine
with the same behaviour. By creating a state machine, the need for a sequential
platform is removed. See State machine.

Staticise, static - data and objects whose existence is inferred before
execution and which exist throughout execution. Their method of allocation is
basically invisible to the program itself.

Step - A small part of the project's transformation process. There are a number 
of steps in each phase, and they are performed one at a time. The intermediate
style between each pair of consecutive steps should be well-defined and 
compilable for testing purposes. Most steps introduce invariants.

Structural - in reference to a system, structure describes the hierarchical
breakdown into concurrently-existing subsystems, the topology of their
interconnections and protocols for communication.

Style - a choice of programming constructs to use when representing a
program; the course-grained aspect of program representation. Intermediate
styles are ones passed through during transformation but that do not appear in
the input C++ or output Verilog.

Sub-transaction - a well-defined interaction between two servers in which an
event and some data are propagated in one direction. There are two
sub-transactions for each function call corresponding to call and return.

Synthesis - the process of converting a Verilog (or similar HDL construct) into
physical hardware. This is not an objective of the project, however the ability
to perform synthesis imposes limitations on the styles of SystemC and Verilog we
can include in our output.

There-and-back-again - A possible weakness in the design whereby some of the
functionality of one step is undone in another. For example if step A converts
all x into y, and step B converts y back to x, then effort may have been wasted.
This is only a problem if the new x corresponds to the same input program
element as the original x - otherwise it may be
there-and-back-to-somewhere-else.

Thunk - a forwarding function

Transaction - a well-defined interaction between two servers in which events and
data may be exchanged. A function call becomes a transaction when caller and
callee are regarded as separate, concurrent servers.

Transformation step - a part of the mid-level design of the code translation
algorithm which performs a specified, relatively simple, transformation on the
code such that the code may be successfully executed for test purposes before
and after.

Upper executive - code that we add to a server to support incoming function
calls and overall execution control in order to support structural style. See
lower executive.

